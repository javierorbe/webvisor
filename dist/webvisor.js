!function(t){var n={};function r(e){if(n[e])return n[e].exports;var u=n[e]={i:e,l:!1,exports:{}};return t[e].call(u.exports,u,u.exports,r),u.l=!0,u.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)r.d(e,u,function(n){return t[n]}.bind(null,u));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=5)}([function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"EPSILON",function(){return l}),r.d(e,"ARRAY_TYPE",function(){return M}),r.d(e,"RANDOM",function(){return m}),r.d(e,"setMatrixArrayType",function(){return v}),r.d(e,"toRadian",function(){return b}),r.d(e,"equals",function(){return p});var u={};r.r(u),r.d(u,"create",function(){return x}),r.d(u,"clone",function(){return w}),r.d(u,"copy",function(){return E}),r.d(u,"identity",function(){return y}),r.d(u,"fromValues",function(){return _}),r.d(u,"set",function(){return T}),r.d(u,"transpose",function(){return A}),r.d(u,"invert",function(){return R}),r.d(u,"adjoint",function(){return P}),r.d(u,"determinant",function(){return S}),r.d(u,"multiply",function(){return L}),r.d(u,"rotate",function(){return q}),r.d(u,"scale",function(){return I}),r.d(u,"fromRotation",function(){return U}),r.d(u,"fromScaling",function(){return V}),r.d(u,"str",function(){return F}),r.d(u,"frob",function(){return O}),r.d(u,"LDU",function(){return C}),r.d(u,"add",function(){return D}),r.d(u,"subtract",function(){return N}),r.d(u,"exactEquals",function(){return B}),r.d(u,"equals",function(){return j}),r.d(u,"multiplyScalar",function(){return Y}),r.d(u,"multiplyScalarAndAdd",function(){return G}),r.d(u,"mul",function(){return X}),r.d(u,"sub",function(){return z});var a={};r.r(a),r.d(a,"create",function(){return W}),r.d(a,"clone",function(){return k}),r.d(a,"copy",function(){return H}),r.d(a,"identity",function(){return K}),r.d(a,"fromValues",function(){return Q}),r.d(a,"set",function(){return Z}),r.d(a,"invert",function(){return $}),r.d(a,"determinant",function(){return J}),r.d(a,"multiply",function(){return tt}),r.d(a,"rotate",function(){return nt}),r.d(a,"scale",function(){return rt}),r.d(a,"translate",function(){return et}),r.d(a,"fromRotation",function(){return ut}),r.d(a,"fromScaling",function(){return at}),r.d(a,"fromTranslation",function(){return it}),r.d(a,"str",function(){return ot}),r.d(a,"frob",function(){return st}),r.d(a,"add",function(){return ct}),r.d(a,"subtract",function(){return ft}),r.d(a,"multiplyScalar",function(){return ht}),r.d(a,"multiplyScalarAndAdd",function(){return dt}),r.d(a,"exactEquals",function(){return lt}),r.d(a,"equals",function(){return Mt}),r.d(a,"mul",function(){return mt}),r.d(a,"sub",function(){return vt});var i={};r.r(i),r.d(i,"create",function(){return gt}),r.d(i,"fromMat4",function(){return bt}),r.d(i,"clone",function(){return pt}),r.d(i,"copy",function(){return xt}),r.d(i,"fromValues",function(){return wt}),r.d(i,"set",function(){return Et}),r.d(i,"identity",function(){return yt}),r.d(i,"transpose",function(){return _t}),r.d(i,"invert",function(){return Tt}),r.d(i,"adjoint",function(){return At}),r.d(i,"determinant",function(){return Rt}),r.d(i,"multiply",function(){return Pt}),r.d(i,"translate",function(){return St}),r.d(i,"rotate",function(){return Lt}),r.d(i,"scale",function(){return qt}),r.d(i,"fromTranslation",function(){return It}),r.d(i,"fromRotation",function(){return Ut}),r.d(i,"fromScaling",function(){return Vt}),r.d(i,"fromMat2d",function(){return Ft}),r.d(i,"fromQuat",function(){return Ot}),r.d(i,"normalFromMat4",function(){return Ct}),r.d(i,"projection",function(){return Dt}),r.d(i,"str",function(){return Nt}),r.d(i,"frob",function(){return Bt}),r.d(i,"add",function(){return jt}),r.d(i,"subtract",function(){return Yt}),r.d(i,"multiplyScalar",function(){return Gt}),r.d(i,"multiplyScalarAndAdd",function(){return Xt}),r.d(i,"exactEquals",function(){return zt}),r.d(i,"equals",function(){return Wt}),r.d(i,"mul",function(){return kt}),r.d(i,"sub",function(){return Ht});var o={};r.r(o),r.d(o,"create",function(){return Kt}),r.d(o,"clone",function(){return Qt}),r.d(o,"copy",function(){return Zt}),r.d(o,"fromValues",function(){return $t}),r.d(o,"set",function(){return Jt}),r.d(o,"identity",function(){return tn}),r.d(o,"transpose",function(){return nn}),r.d(o,"invert",function(){return rn}),r.d(o,"adjoint",function(){return en}),r.d(o,"determinant",function(){return un}),r.d(o,"multiply",function(){return an}),r.d(o,"translate",function(){return on}),r.d(o,"scale",function(){return sn}),r.d(o,"rotate",function(){return cn}),r.d(o,"rotateX",function(){return fn}),r.d(o,"rotateY",function(){return hn}),r.d(o,"rotateZ",function(){return dn}),r.d(o,"fromTranslation",function(){return ln}),r.d(o,"fromScaling",function(){return Mn}),r.d(o,"fromRotation",function(){return mn}),r.d(o,"fromXRotation",function(){return vn}),r.d(o,"fromYRotation",function(){return gn}),r.d(o,"fromZRotation",function(){return bn}),r.d(o,"fromRotationTranslation",function(){return pn}),r.d(o,"fromQuat2",function(){return xn}),r.d(o,"getTranslation",function(){return wn}),r.d(o,"getScaling",function(){return En}),r.d(o,"getRotation",function(){return yn}),r.d(o,"fromRotationTranslationScale",function(){return _n}),r.d(o,"fromRotationTranslationScaleOrigin",function(){return Tn}),r.d(o,"fromQuat",function(){return An}),r.d(o,"frustum",function(){return Rn}),r.d(o,"perspective",function(){return Pn}),r.d(o,"perspectiveFromFieldOfView",function(){return Sn}),r.d(o,"ortho",function(){return Ln}),r.d(o,"lookAt",function(){return qn}),r.d(o,"targetTo",function(){return In}),r.d(o,"str",function(){return Un}),r.d(o,"frob",function(){return Vn}),r.d(o,"add",function(){return Fn}),r.d(o,"subtract",function(){return On}),r.d(o,"multiplyScalar",function(){return Cn}),r.d(o,"multiplyScalarAndAdd",function(){return Dn}),r.d(o,"exactEquals",function(){return Nn}),r.d(o,"equals",function(){return Bn}),r.d(o,"mul",function(){return jn}),r.d(o,"sub",function(){return Yn});var s={};r.r(s),r.d(s,"create",function(){return Gn}),r.d(s,"clone",function(){return Xn}),r.d(s,"length",function(){return zn}),r.d(s,"fromValues",function(){return Wn}),r.d(s,"copy",function(){return kn}),r.d(s,"set",function(){return Hn}),r.d(s,"add",function(){return Kn}),r.d(s,"subtract",function(){return Qn}),r.d(s,"multiply",function(){return Zn}),r.d(s,"divide",function(){return $n}),r.d(s,"ceil",function(){return Jn}),r.d(s,"floor",function(){return tr}),r.d(s,"min",function(){return nr}),r.d(s,"max",function(){return rr}),r.d(s,"round",function(){return er}),r.d(s,"scale",function(){return ur}),r.d(s,"scaleAndAdd",function(){return ar}),r.d(s,"distance",function(){return ir}),r.d(s,"squaredDistance",function(){return or}),r.d(s,"squaredLength",function(){return sr}),r.d(s,"negate",function(){return cr}),r.d(s,"inverse",function(){return fr}),r.d(s,"normalize",function(){return hr}),r.d(s,"dot",function(){return dr}),r.d(s,"cross",function(){return lr}),r.d(s,"lerp",function(){return Mr}),r.d(s,"hermite",function(){return mr}),r.d(s,"bezier",function(){return vr}),r.d(s,"random",function(){return gr}),r.d(s,"transformMat4",function(){return br}),r.d(s,"transformMat3",function(){return pr}),r.d(s,"transformQuat",function(){return xr}),r.d(s,"rotateX",function(){return wr}),r.d(s,"rotateY",function(){return Er}),r.d(s,"rotateZ",function(){return yr}),r.d(s,"angle",function(){return _r}),r.d(s,"str",function(){return Tr}),r.d(s,"exactEquals",function(){return Ar}),r.d(s,"equals",function(){return Rr}),r.d(s,"sub",function(){return Sr}),r.d(s,"mul",function(){return Lr}),r.d(s,"div",function(){return qr}),r.d(s,"dist",function(){return Ir}),r.d(s,"sqrDist",function(){return Ur}),r.d(s,"len",function(){return Vr}),r.d(s,"sqrLen",function(){return Fr}),r.d(s,"forEach",function(){return Or});var c={};r.r(c),r.d(c,"create",function(){return Cr}),r.d(c,"clone",function(){return Dr}),r.d(c,"fromValues",function(){return Nr}),r.d(c,"copy",function(){return Br}),r.d(c,"set",function(){return jr}),r.d(c,"add",function(){return Yr}),r.d(c,"subtract",function(){return Gr}),r.d(c,"multiply",function(){return Xr}),r.d(c,"divide",function(){return zr}),r.d(c,"ceil",function(){return Wr}),r.d(c,"floor",function(){return kr}),r.d(c,"min",function(){return Hr}),r.d(c,"max",function(){return Kr}),r.d(c,"round",function(){return Qr}),r.d(c,"scale",function(){return Zr}),r.d(c,"scaleAndAdd",function(){return $r}),r.d(c,"distance",function(){return Jr}),r.d(c,"squaredDistance",function(){return te}),r.d(c,"length",function(){return ne}),r.d(c,"squaredLength",function(){return re}),r.d(c,"negate",function(){return ee}),r.d(c,"inverse",function(){return ue}),r.d(c,"normalize",function(){return ae}),r.d(c,"dot",function(){return ie}),r.d(c,"lerp",function(){return oe}),r.d(c,"random",function(){return se}),r.d(c,"transformMat4",function(){return ce}),r.d(c,"transformQuat",function(){return fe}),r.d(c,"str",function(){return he}),r.d(c,"exactEquals",function(){return de}),r.d(c,"equals",function(){return le}),r.d(c,"sub",function(){return Me}),r.d(c,"mul",function(){return me}),r.d(c,"div",function(){return ve}),r.d(c,"dist",function(){return ge}),r.d(c,"sqrDist",function(){return be}),r.d(c,"len",function(){return pe}),r.d(c,"sqrLen",function(){return xe}),r.d(c,"forEach",function(){return we});var f={};r.r(f),r.d(f,"create",function(){return Ee}),r.d(f,"identity",function(){return ye}),r.d(f,"setAxisAngle",function(){return _e}),r.d(f,"getAxisAngle",function(){return Te}),r.d(f,"multiply",function(){return Ae}),r.d(f,"rotateX",function(){return Re}),r.d(f,"rotateY",function(){return Pe}),r.d(f,"rotateZ",function(){return Se}),r.d(f,"calculateW",function(){return Le}),r.d(f,"slerp",function(){return qe}),r.d(f,"random",function(){return Ie}),r.d(f,"invert",function(){return Ue}),r.d(f,"conjugate",function(){return Ve}),r.d(f,"fromMat3",function(){return Fe}),r.d(f,"fromEuler",function(){return Oe}),r.d(f,"str",function(){return Ce}),r.d(f,"clone",function(){return Xe}),r.d(f,"fromValues",function(){return ze}),r.d(f,"copy",function(){return We}),r.d(f,"set",function(){return ke}),r.d(f,"add",function(){return He}),r.d(f,"mul",function(){return Ke}),r.d(f,"scale",function(){return Qe}),r.d(f,"dot",function(){return Ze}),r.d(f,"lerp",function(){return $e}),r.d(f,"length",function(){return Je}),r.d(f,"len",function(){return tu}),r.d(f,"squaredLength",function(){return nu}),r.d(f,"sqrLen",function(){return ru}),r.d(f,"normalize",function(){return eu}),r.d(f,"exactEquals",function(){return uu}),r.d(f,"equals",function(){return au}),r.d(f,"rotationTo",function(){return iu}),r.d(f,"sqlerp",function(){return ou}),r.d(f,"setAxes",function(){return su});var h={};r.r(h),r.d(h,"create",function(){return cu}),r.d(h,"clone",function(){return fu}),r.d(h,"fromValues",function(){return hu}),r.d(h,"fromRotationTranslationValues",function(){return du}),r.d(h,"fromRotationTranslation",function(){return lu}),r.d(h,"fromTranslation",function(){return Mu}),r.d(h,"fromRotation",function(){return mu}),r.d(h,"fromMat4",function(){return vu}),r.d(h,"copy",function(){return gu}),r.d(h,"identity",function(){return bu}),r.d(h,"set",function(){return pu}),r.d(h,"getReal",function(){return xu}),r.d(h,"getDual",function(){return wu}),r.d(h,"setReal",function(){return Eu}),r.d(h,"setDual",function(){return yu}),r.d(h,"getTranslation",function(){return _u}),r.d(h,"translate",function(){return Tu}),r.d(h,"rotateX",function(){return Au}),r.d(h,"rotateY",function(){return Ru}),r.d(h,"rotateZ",function(){return Pu}),r.d(h,"rotateByQuatAppend",function(){return Su}),r.d(h,"rotateByQuatPrepend",function(){return Lu}),r.d(h,"rotateAroundAxis",function(){return qu}),r.d(h,"add",function(){return Iu}),r.d(h,"multiply",function(){return Uu}),r.d(h,"mul",function(){return Vu}),r.d(h,"scale",function(){return Fu}),r.d(h,"dot",function(){return Ou}),r.d(h,"lerp",function(){return Cu}),r.d(h,"invert",function(){return Du}),r.d(h,"conjugate",function(){return Nu}),r.d(h,"length",function(){return Bu}),r.d(h,"len",function(){return ju}),r.d(h,"squaredLength",function(){return Yu}),r.d(h,"sqrLen",function(){return Gu}),r.d(h,"normalize",function(){return Xu}),r.d(h,"str",function(){return zu}),r.d(h,"exactEquals",function(){return Wu}),r.d(h,"equals",function(){return ku});var d={};r.r(d),r.d(d,"create",function(){return Hu}),r.d(d,"clone",function(){return Ku}),r.d(d,"fromValues",function(){return Qu}),r.d(d,"copy",function(){return Zu}),r.d(d,"set",function(){return $u}),r.d(d,"add",function(){return Ju}),r.d(d,"subtract",function(){return ta}),r.d(d,"multiply",function(){return na}),r.d(d,"divide",function(){return ra}),r.d(d,"ceil",function(){return ea}),r.d(d,"floor",function(){return ua}),r.d(d,"min",function(){return aa}),r.d(d,"max",function(){return ia}),r.d(d,"round",function(){return oa}),r.d(d,"scale",function(){return sa}),r.d(d,"scaleAndAdd",function(){return ca}),r.d(d,"distance",function(){return fa}),r.d(d,"squaredDistance",function(){return ha}),r.d(d,"length",function(){return da}),r.d(d,"squaredLength",function(){return la}),r.d(d,"negate",function(){return Ma}),r.d(d,"inverse",function(){return ma}),r.d(d,"normalize",function(){return va}),r.d(d,"dot",function(){return ga}),r.d(d,"cross",function(){return ba}),r.d(d,"lerp",function(){return pa}),r.d(d,"random",function(){return xa}),r.d(d,"transformMat2",function(){return wa}),r.d(d,"transformMat2d",function(){return Ea}),r.d(d,"transformMat3",function(){return ya}),r.d(d,"transformMat4",function(){return _a}),r.d(d,"rotate",function(){return Ta}),r.d(d,"angle",function(){return Aa}),r.d(d,"str",function(){return Ra}),r.d(d,"exactEquals",function(){return Pa}),r.d(d,"equals",function(){return Sa}),r.d(d,"len",function(){return La}),r.d(d,"sub",function(){return qa}),r.d(d,"mul",function(){return Ia}),r.d(d,"div",function(){return Ua}),r.d(d,"dist",function(){return Va}),r.d(d,"sqrDist",function(){return Fa}),r.d(d,"sqrLen",function(){return Oa}),r.d(d,"forEach",function(){return Ca});var l=1e-6,M="undefined"!=typeof Float32Array?Float32Array:Array,m=Math.random;function v(t){M=t}var g=Math.PI/180;function b(t){return t*g}function p(t,n){return Math.abs(t-n)<=l*Math.max(1,Math.abs(t),Math.abs(n))}function x(){var t=new M(4);return M!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t}function w(t){var n=new M(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function E(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function y(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function _(t,n,r,e){var u=new M(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u}function T(t,n,r,e,u){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t}function A(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t}function R(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=r*a-u*e;return i?(i=1/i,t[0]=a*i,t[1]=-e*i,t[2]=-u*i,t[3]=r*i,t):null}function P(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t}function S(t){return t[0]*t[3]-t[2]*t[1]}function L(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=r[0],s=r[1],c=r[2],f=r[3];return t[0]=e*o+a*s,t[1]=u*o+i*s,t[2]=e*c+a*f,t[3]=u*c+i*f,t}function q(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s+a*o,t[1]=u*s+i*o,t[2]=e*-o+a*s,t[3]=u*-o+i*s,t}function I(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=r[0],s=r[1];return t[0]=e*o,t[1]=u*o,t[2]=a*s,t[3]=i*s,t}function U(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t}function V(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t}function F(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function O(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))}function C(t,n,r,e){return t[2]=e[2]/e[0],r[0]=e[0],r[1]=e[1],r[3]=e[3]-t[2]*r[1],[t,n,r]}function D(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function N(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function B(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function j(t,n){var r=t[0],e=t[1],u=t[2],a=t[3],i=n[0],o=n[1],s=n[2],c=n[3];return Math.abs(r-i)<=l*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-o)<=l*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(u-s)<=l*Math.max(1,Math.abs(u),Math.abs(s))&&Math.abs(a-c)<=l*Math.max(1,Math.abs(a),Math.abs(c))}function Y(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function G(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}var X=L,z=N;function W(){var t=new M(6);return M!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t}function k(t){var n=new M(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n}function H(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t}function K(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function Q(t,n,r,e,u,a){var i=new M(6);return i[0]=t,i[1]=n,i[2]=r,i[3]=e,i[4]=u,i[5]=a,i}function Z(t,n,r,e,u,a,i){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=a,t[5]=i,t}function $(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=n[4],o=n[5],s=r*a-e*u;return s?(s=1/s,t[0]=a*s,t[1]=-e*s,t[2]=-u*s,t[3]=r*s,t[4]=(u*o-a*i)*s,t[5]=(e*i-r*o)*s,t):null}function J(t){return t[0]*t[3]-t[1]*t[2]}function tt(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=r[0],f=r[1],h=r[2],d=r[3],l=r[4],M=r[5];return t[0]=e*c+a*f,t[1]=u*c+i*f,t[2]=e*h+a*d,t[3]=u*h+i*d,t[4]=e*l+a*M+o,t[5]=u*l+i*M+s,t}function nt(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=Math.sin(r),f=Math.cos(r);return t[0]=e*f+a*c,t[1]=u*f+i*c,t[2]=e*-c+a*f,t[3]=u*-c+i*f,t[4]=o,t[5]=s,t}function rt(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=r[0],f=r[1];return t[0]=e*c,t[1]=u*c,t[2]=a*f,t[3]=i*f,t[4]=o,t[5]=s,t}function et(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=r[0],f=r[1];return t[0]=e,t[1]=u,t[2]=a,t[3]=i,t[4]=e*c+a*f+o,t[5]=u*c+i*f+s,t}function ut(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t[4]=0,t[5]=0,t}function at(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t}function it(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t}function ot(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function st(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)}function ct(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t}function ft(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t}function ht(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t}function dt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t}function lt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]}function Mt(t,n){var r=t[0],e=t[1],u=t[2],a=t[3],i=t[4],o=t[5],s=n[0],c=n[1],f=n[2],h=n[3],d=n[4],M=n[5];return Math.abs(r-s)<=l*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(e-c)<=l*Math.max(1,Math.abs(e),Math.abs(c))&&Math.abs(u-f)<=l*Math.max(1,Math.abs(u),Math.abs(f))&&Math.abs(a-h)<=l*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(i-d)<=l*Math.max(1,Math.abs(i),Math.abs(d))&&Math.abs(o-M)<=l*Math.max(1,Math.abs(o),Math.abs(M))}var mt=tt,vt=ft;function gt(){var t=new M(9);return M!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function bt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t}function pt(t){var n=new M(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n}function xt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function wt(t,n,r,e,u,a,i,o,s){var c=new M(9);return c[0]=t,c[1]=n,c[2]=r,c[3]=e,c[4]=u,c[5]=a,c[6]=i,c[7]=o,c[8]=s,c}function Et(t,n,r,e,u,a,i,o,s,c){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=a,t[5]=i,t[6]=o,t[7]=s,t[8]=c,t}function yt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function _t(t,n){if(t===n){var r=n[1],e=n[2],u=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=e,t[7]=u}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t}function Tt(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=f*i-o*c,d=-f*a+o*s,l=c*a-i*s,M=r*h+e*d+u*l;return M?(M=1/M,t[0]=h*M,t[1]=(-f*e+u*c)*M,t[2]=(o*e-u*i)*M,t[3]=d*M,t[4]=(f*r-u*s)*M,t[5]=(-o*r+u*a)*M,t[6]=l*M,t[7]=(-c*r+e*s)*M,t[8]=(i*r-e*a)*M,t):null}function At(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=n[4],o=n[5],s=n[6],c=n[7],f=n[8];return t[0]=i*f-o*c,t[1]=u*c-e*f,t[2]=e*o-u*i,t[3]=o*s-a*f,t[4]=r*f-u*s,t[5]=u*a-r*o,t[6]=a*c-i*s,t[7]=e*s-r*c,t[8]=r*i-e*a,t}function Rt(t){var n=t[0],r=t[1],e=t[2],u=t[3],a=t[4],i=t[5],o=t[6],s=t[7],c=t[8];return n*(c*a-i*s)+r*(-c*u+i*o)+e*(s*u-a*o)}function Pt(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=r[0],l=r[1],M=r[2],m=r[3],v=r[4],g=r[5],b=r[6],p=r[7],x=r[8];return t[0]=d*e+l*i+M*c,t[1]=d*u+l*o+M*f,t[2]=d*a+l*s+M*h,t[3]=m*e+v*i+g*c,t[4]=m*u+v*o+g*f,t[5]=m*a+v*s+g*h,t[6]=b*e+p*i+x*c,t[7]=b*u+p*o+x*f,t[8]=b*a+p*s+x*h,t}function St(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=r[0],l=r[1];return t[0]=e,t[1]=u,t[2]=a,t[3]=i,t[4]=o,t[5]=s,t[6]=d*e+l*i+c,t[7]=d*u+l*o+f,t[8]=d*a+l*s+h,t}function Lt(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=Math.sin(r),l=Math.cos(r);return t[0]=l*e+d*i,t[1]=l*u+d*o,t[2]=l*a+d*s,t[3]=l*i-d*e,t[4]=l*o-d*u,t[5]=l*s-d*a,t[6]=c,t[7]=f,t[8]=h,t}function qt(t,n,r){var e=r[0],u=r[1];return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=u*n[3],t[4]=u*n[4],t[5]=u*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function It(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t}function Ut(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=-r,t[4]=e,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Vt(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Ft(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t}function Ot(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=r+r,o=e+e,s=u+u,c=r*i,f=e*i,h=e*o,d=u*i,l=u*o,M=u*s,m=a*i,v=a*o,g=a*s;return t[0]=1-h-M,t[3]=f-g,t[6]=d+v,t[1]=f+g,t[4]=1-c-M,t[7]=l-m,t[2]=d-v,t[5]=l+m,t[8]=1-c-h,t}function Ct(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=n[9],d=n[10],l=n[11],M=n[12],m=n[13],v=n[14],g=n[15],b=r*o-e*i,p=r*s-u*i,x=r*c-a*i,w=e*s-u*o,E=e*c-a*o,y=u*c-a*s,_=f*m-h*M,T=f*v-d*M,A=f*g-l*M,R=h*v-d*m,P=h*g-l*m,S=d*g-l*v,L=b*S-p*P+x*R+w*A-E*T+y*_;return L?(L=1/L,t[0]=(o*S-s*P+c*R)*L,t[1]=(s*A-i*S-c*T)*L,t[2]=(i*P-o*A+c*_)*L,t[3]=(u*P-e*S-a*R)*L,t[4]=(r*S-u*A+a*T)*L,t[5]=(e*A-r*P-a*_)*L,t[6]=(m*y-v*E+g*w)*L,t[7]=(v*x-M*y-g*p)*L,t[8]=(M*E-m*x+g*b)*L,t):null}function Dt(t,n,r){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function Nt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function Bt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))}function jt(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t}function Yt(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t}function Gt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t}function Xt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t}function zt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]}function Wt(t,n){var r=t[0],e=t[1],u=t[2],a=t[3],i=t[4],o=t[5],s=t[6],c=t[7],f=t[8],h=n[0],d=n[1],M=n[2],m=n[3],v=n[4],g=n[5],b=n[6],p=n[7],x=n[8];return Math.abs(r-h)<=l*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(e-d)<=l*Math.max(1,Math.abs(e),Math.abs(d))&&Math.abs(u-M)<=l*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(a-m)<=l*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(i-v)<=l*Math.max(1,Math.abs(i),Math.abs(v))&&Math.abs(o-g)<=l*Math.max(1,Math.abs(o),Math.abs(g))&&Math.abs(s-b)<=l*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(c-p)<=l*Math.max(1,Math.abs(c),Math.abs(p))&&Math.abs(f-x)<=l*Math.max(1,Math.abs(f),Math.abs(x))}var kt=Pt,Ht=Yt;function Kt(){var t=new M(16);return M!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function Qt(t){var n=new M(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function Zt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function $t(t,n,r,e,u,a,i,o,s,c,f,h,d,l,m,v){var g=new M(16);return g[0]=t,g[1]=n,g[2]=r,g[3]=e,g[4]=u,g[5]=a,g[6]=i,g[7]=o,g[8]=s,g[9]=c,g[10]=f,g[11]=h,g[12]=d,g[13]=l,g[14]=m,g[15]=v,g}function Jt(t,n,r,e,u,a,i,o,s,c,f,h,d,l,M,m,v){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=a,t[5]=i,t[6]=o,t[7]=s,t[8]=c,t[9]=f,t[10]=h,t[11]=d,t[12]=l,t[13]=M,t[14]=m,t[15]=v,t}function tn(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function nn(t,n){if(t===n){var r=n[1],e=n[2],u=n[3],a=n[6],i=n[7],o=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=a,t[11]=n[14],t[12]=u,t[13]=i,t[14]=o}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function rn(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=n[9],d=n[10],l=n[11],M=n[12],m=n[13],v=n[14],g=n[15],b=r*o-e*i,p=r*s-u*i,x=r*c-a*i,w=e*s-u*o,E=e*c-a*o,y=u*c-a*s,_=f*m-h*M,T=f*v-d*M,A=f*g-l*M,R=h*v-d*m,P=h*g-l*m,S=d*g-l*v,L=b*S-p*P+x*R+w*A-E*T+y*_;return L?(L=1/L,t[0]=(o*S-s*P+c*R)*L,t[1]=(u*P-e*S-a*R)*L,t[2]=(m*y-v*E+g*w)*L,t[3]=(d*E-h*y-l*w)*L,t[4]=(s*A-i*S-c*T)*L,t[5]=(r*S-u*A+a*T)*L,t[6]=(v*x-M*y-g*p)*L,t[7]=(f*y-d*x+l*p)*L,t[8]=(i*P-o*A+c*_)*L,t[9]=(e*A-r*P-a*_)*L,t[10]=(M*E-m*x+g*b)*L,t[11]=(h*x-f*E-l*b)*L,t[12]=(o*T-i*R-s*_)*L,t[13]=(r*R-e*T+u*_)*L,t[14]=(m*p-M*w-v*b)*L,t[15]=(f*w-h*p+d*b)*L,t):null}function en(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=n[9],d=n[10],l=n[11],M=n[12],m=n[13],v=n[14],g=n[15];return t[0]=o*(d*g-l*v)-h*(s*g-c*v)+m*(s*l-c*d),t[1]=-(e*(d*g-l*v)-h*(u*g-a*v)+m*(u*l-a*d)),t[2]=e*(s*g-c*v)-o*(u*g-a*v)+m*(u*c-a*s),t[3]=-(e*(s*l-c*d)-o*(u*l-a*d)+h*(u*c-a*s)),t[4]=-(i*(d*g-l*v)-f*(s*g-c*v)+M*(s*l-c*d)),t[5]=r*(d*g-l*v)-f*(u*g-a*v)+M*(u*l-a*d),t[6]=-(r*(s*g-c*v)-i*(u*g-a*v)+M*(u*c-a*s)),t[7]=r*(s*l-c*d)-i*(u*l-a*d)+f*(u*c-a*s),t[8]=i*(h*g-l*m)-f*(o*g-c*m)+M*(o*l-c*h),t[9]=-(r*(h*g-l*m)-f*(e*g-a*m)+M*(e*l-a*h)),t[10]=r*(o*g-c*m)-i*(e*g-a*m)+M*(e*c-a*o),t[11]=-(r*(o*l-c*h)-i*(e*l-a*h)+f*(e*c-a*o)),t[12]=-(i*(h*v-d*m)-f*(o*v-s*m)+M*(o*d-s*h)),t[13]=r*(h*v-d*m)-f*(e*v-u*m)+M*(e*d-u*h),t[14]=-(r*(o*v-s*m)-i*(e*v-u*m)+M*(e*s-u*o)),t[15]=r*(o*d-s*h)-i*(e*d-u*h)+f*(e*s-u*o),t}function un(t){var n=t[0],r=t[1],e=t[2],u=t[3],a=t[4],i=t[5],o=t[6],s=t[7],c=t[8],f=t[9],h=t[10],d=t[11],l=t[12],M=t[13],m=t[14],v=t[15];return(n*i-r*a)*(h*v-d*m)-(n*o-e*a)*(f*v-d*M)+(n*s-u*a)*(f*m-h*M)+(r*o-e*i)*(c*v-d*l)-(r*s-u*i)*(c*m-h*l)+(e*s-u*o)*(c*M-f*l)}function an(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=n[9],l=n[10],M=n[11],m=n[12],v=n[13],g=n[14],b=n[15],p=r[0],x=r[1],w=r[2],E=r[3];return t[0]=p*e+x*o+w*h+E*m,t[1]=p*u+x*s+w*d+E*v,t[2]=p*a+x*c+w*l+E*g,t[3]=p*i+x*f+w*M+E*b,p=r[4],x=r[5],w=r[6],E=r[7],t[4]=p*e+x*o+w*h+E*m,t[5]=p*u+x*s+w*d+E*v,t[6]=p*a+x*c+w*l+E*g,t[7]=p*i+x*f+w*M+E*b,p=r[8],x=r[9],w=r[10],E=r[11],t[8]=p*e+x*o+w*h+E*m,t[9]=p*u+x*s+w*d+E*v,t[10]=p*a+x*c+w*l+E*g,t[11]=p*i+x*f+w*M+E*b,p=r[12],x=r[13],w=r[14],E=r[15],t[12]=p*e+x*o+w*h+E*m,t[13]=p*u+x*s+w*d+E*v,t[14]=p*a+x*c+w*l+E*g,t[15]=p*i+x*f+w*M+E*b,t}function on(t,n,r){var e=r[0],u=r[1],a=r[2],i=void 0,o=void 0,s=void 0,c=void 0,f=void 0,h=void 0,d=void 0,l=void 0,M=void 0,m=void 0,v=void 0,g=void 0;return n===t?(t[12]=n[0]*e+n[4]*u+n[8]*a+n[12],t[13]=n[1]*e+n[5]*u+n[9]*a+n[13],t[14]=n[2]*e+n[6]*u+n[10]*a+n[14],t[15]=n[3]*e+n[7]*u+n[11]*a+n[15]):(i=n[0],o=n[1],s=n[2],c=n[3],f=n[4],h=n[5],d=n[6],l=n[7],M=n[8],m=n[9],v=n[10],g=n[11],t[0]=i,t[1]=o,t[2]=s,t[3]=c,t[4]=f,t[5]=h,t[6]=d,t[7]=l,t[8]=M,t[9]=m,t[10]=v,t[11]=g,t[12]=i*e+f*u+M*a+n[12],t[13]=o*e+h*u+m*a+n[13],t[14]=s*e+d*u+v*a+n[14],t[15]=c*e+l*u+g*a+n[15]),t}function sn(t,n,r){var e=r[0],u=r[1],a=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*u,t[5]=n[5]*u,t[6]=n[6]*u,t[7]=n[7]*u,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=n[11]*a,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function cn(t,n,r,e){var u,a,i,o,s,c,f,h,d,M,m,v,g,b,p,x,w,E,y,_,T,A,R,P,S=e[0],L=e[1],q=e[2],I=Math.sqrt(S*S+L*L+q*q);return I<l?null:(S*=I=1/I,L*=I,q*=I,u=Math.sin(r),i=1-(a=Math.cos(r)),o=n[0],s=n[1],c=n[2],f=n[3],h=n[4],d=n[5],M=n[6],m=n[7],v=n[8],g=n[9],b=n[10],p=n[11],x=S*S*i+a,w=L*S*i+q*u,E=q*S*i-L*u,y=S*L*i-q*u,_=L*L*i+a,T=q*L*i+S*u,A=S*q*i+L*u,R=L*q*i-S*u,P=q*q*i+a,t[0]=o*x+h*w+v*E,t[1]=s*x+d*w+g*E,t[2]=c*x+M*w+b*E,t[3]=f*x+m*w+p*E,t[4]=o*y+h*_+v*T,t[5]=s*y+d*_+g*T,t[6]=c*y+M*_+b*T,t[7]=f*y+m*_+p*T,t[8]=o*A+h*R+v*P,t[9]=s*A+d*R+g*P,t[10]=c*A+M*R+b*P,t[11]=f*A+m*R+p*P,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function fn(t,n,r){var e=Math.sin(r),u=Math.cos(r),a=n[4],i=n[5],o=n[6],s=n[7],c=n[8],f=n[9],h=n[10],d=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=a*u+c*e,t[5]=i*u+f*e,t[6]=o*u+h*e,t[7]=s*u+d*e,t[8]=c*u-a*e,t[9]=f*u-i*e,t[10]=h*u-o*e,t[11]=d*u-s*e,t}function hn(t,n,r){var e=Math.sin(r),u=Math.cos(r),a=n[0],i=n[1],o=n[2],s=n[3],c=n[8],f=n[9],h=n[10],d=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*u-c*e,t[1]=i*u-f*e,t[2]=o*u-h*e,t[3]=s*u-d*e,t[8]=a*e+c*u,t[9]=i*e+f*u,t[10]=o*e+h*u,t[11]=s*e+d*u,t}function dn(t,n,r){var e=Math.sin(r),u=Math.cos(r),a=n[0],i=n[1],o=n[2],s=n[3],c=n[4],f=n[5],h=n[6],d=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*u+c*e,t[1]=i*u+f*e,t[2]=o*u+h*e,t[3]=s*u+d*e,t[4]=c*u-a*e,t[5]=f*u-i*e,t[6]=h*u-o*e,t[7]=d*u-s*e,t}function ln(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Mn(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function mn(t,n,r){var e,u,a,i=r[0],o=r[1],s=r[2],c=Math.sqrt(i*i+o*o+s*s);return c<l?null:(i*=c=1/c,o*=c,s*=c,e=Math.sin(n),a=1-(u=Math.cos(n)),t[0]=i*i*a+u,t[1]=o*i*a+s*e,t[2]=s*i*a-o*e,t[3]=0,t[4]=i*o*a-s*e,t[5]=o*o*a+u,t[6]=s*o*a+i*e,t[7]=0,t[8]=i*s*a+o*e,t[9]=o*s*a-i*e,t[10]=s*s*a+u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function vn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function gn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function bn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function pn(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=e+e,s=u+u,c=a+a,f=e*o,h=e*s,d=e*c,l=u*s,M=u*c,m=a*c,v=i*o,g=i*s,b=i*c;return t[0]=1-(l+m),t[1]=h+b,t[2]=d-g,t[3]=0,t[4]=h-b,t[5]=1-(f+m),t[6]=M+v,t[7]=0,t[8]=d+g,t[9]=M-v,t[10]=1-(f+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function xn(t,n){var r=new M(3),e=-n[0],u=-n[1],a=-n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=e*e+u*u+a*a+i*i;return h>0?(r[0]=2*(o*i+f*e+s*a-c*u)/h,r[1]=2*(s*i+f*u+c*e-o*a)/h,r[2]=2*(c*i+f*a+o*u-s*e)/h):(r[0]=2*(o*i+f*e+s*a-c*u),r[1]=2*(s*i+f*u+c*e-o*a),r[2]=2*(c*i+f*a+o*u-s*e)),pn(t,n,r),t}function wn(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function En(t,n){var r=n[0],e=n[1],u=n[2],a=n[4],i=n[5],o=n[6],s=n[8],c=n[9],f=n[10];return t[0]=Math.sqrt(r*r+e*e+u*u),t[1]=Math.sqrt(a*a+i*i+o*o),t[2]=Math.sqrt(s*s+c*c+f*f),t}function yn(t,n){var r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function _n(t,n,r,e){var u=n[0],a=n[1],i=n[2],o=n[3],s=u+u,c=a+a,f=i+i,h=u*s,d=u*c,l=u*f,M=a*c,m=a*f,v=i*f,g=o*s,b=o*c,p=o*f,x=e[0],w=e[1],E=e[2];return t[0]=(1-(M+v))*x,t[1]=(d+p)*x,t[2]=(l-b)*x,t[3]=0,t[4]=(d-p)*w,t[5]=(1-(h+v))*w,t[6]=(m+g)*w,t[7]=0,t[8]=(l+b)*E,t[9]=(m-g)*E,t[10]=(1-(h+M))*E,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function Tn(t,n,r,e,u){var a=n[0],i=n[1],o=n[2],s=n[3],c=a+a,f=i+i,h=o+o,d=a*c,l=a*f,M=a*h,m=i*f,v=i*h,g=o*h,b=s*c,p=s*f,x=s*h,w=e[0],E=e[1],y=e[2],_=u[0],T=u[1],A=u[2],R=(1-(m+g))*w,P=(l+x)*w,S=(M-p)*w,L=(l-x)*E,q=(1-(d+g))*E,I=(v+b)*E,U=(M+p)*y,V=(v-b)*y,F=(1-(d+m))*y;return t[0]=R,t[1]=P,t[2]=S,t[3]=0,t[4]=L,t[5]=q,t[6]=I,t[7]=0,t[8]=U,t[9]=V,t[10]=F,t[11]=0,t[12]=r[0]+_-(R*_+L*T+U*A),t[13]=r[1]+T-(P*_+q*T+V*A),t[14]=r[2]+A-(S*_+I*T+F*A),t[15]=1,t}function An(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=r+r,o=e+e,s=u+u,c=r*i,f=e*i,h=e*o,d=u*i,l=u*o,M=u*s,m=a*i,v=a*o,g=a*s;return t[0]=1-h-M,t[1]=f+g,t[2]=d-v,t[3]=0,t[4]=f-g,t[5]=1-c-M,t[6]=l+m,t[7]=0,t[8]=d+v,t[9]=l-m,t[10]=1-c-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Rn(t,n,r,e,u,a,i){var o=1/(r-n),s=1/(u-e),c=1/(a-i);return t[0]=2*a*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*s,t[6]=0,t[7]=0,t[8]=(r+n)*o,t[9]=(u+e)*s,t[10]=(i+a)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=i*a*2*c,t[15]=0,t}function Pn(t,n,r,e,u){var a=1/Math.tan(n/2),i=void 0;return t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=u&&u!==1/0?(i=1/(e-u),t[10]=(u+e)*i,t[14]=2*u*e*i):(t[10]=-1,t[14]=-2*e),t}function Sn(t,n,r,e){var u=Math.tan(n.upDegrees*Math.PI/180),a=Math.tan(n.downDegrees*Math.PI/180),i=Math.tan(n.leftDegrees*Math.PI/180),o=Math.tan(n.rightDegrees*Math.PI/180),s=2/(i+o),c=2/(u+a);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(i-o)*s*.5,t[9]=(u-a)*c*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function Ln(t,n,r,e,u,a,i){var o=1/(n-r),s=1/(e-u),c=1/(a-i);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(n+r)*o,t[13]=(u+e)*s,t[14]=(i+a)*c,t[15]=1,t}function qn(t,n,r,e){var u=void 0,a=void 0,i=void 0,o=void 0,s=void 0,c=void 0,f=void 0,h=void 0,d=void 0,M=void 0,m=n[0],v=n[1],g=n[2],b=e[0],p=e[1],x=e[2],w=r[0],E=r[1],y=r[2];return Math.abs(m-w)<l&&Math.abs(v-E)<l&&Math.abs(g-y)<l?tn(t):(f=m-w,h=v-E,d=g-y,u=p*(d*=M=1/Math.sqrt(f*f+h*h+d*d))-x*(h*=M),a=x*(f*=M)-b*d,i=b*h-p*f,(M=Math.sqrt(u*u+a*a+i*i))?(u*=M=1/M,a*=M,i*=M):(u=0,a=0,i=0),o=h*i-d*a,s=d*u-f*i,c=f*a-h*u,(M=Math.sqrt(o*o+s*s+c*c))?(o*=M=1/M,s*=M,c*=M):(o=0,s=0,c=0),t[0]=u,t[1]=o,t[2]=f,t[3]=0,t[4]=a,t[5]=s,t[6]=h,t[7]=0,t[8]=i,t[9]=c,t[10]=d,t[11]=0,t[12]=-(u*m+a*v+i*g),t[13]=-(o*m+s*v+c*g),t[14]=-(f*m+h*v+d*g),t[15]=1,t)}function In(t,n,r,e){var u=n[0],a=n[1],i=n[2],o=e[0],s=e[1],c=e[2],f=u-r[0],h=a-r[1],d=i-r[2],l=f*f+h*h+d*d;l>0&&(f*=l=1/Math.sqrt(l),h*=l,d*=l);var M=s*d-c*h,m=c*f-o*d,v=o*h-s*f;return(l=M*M+m*m+v*v)>0&&(M*=l=1/Math.sqrt(l),m*=l,v*=l),t[0]=M,t[1]=m,t[2]=v,t[3]=0,t[4]=h*v-d*m,t[5]=d*M-f*v,t[6]=f*m-h*M,t[7]=0,t[8]=f,t[9]=h,t[10]=d,t[11]=0,t[12]=u,t[13]=a,t[14]=i,t[15]=1,t}function Un(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function Vn(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function Fn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function On(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function Cn(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function Dn(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function Nn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function Bn(t,n){var r=t[0],e=t[1],u=t[2],a=t[3],i=t[4],o=t[5],s=t[6],c=t[7],f=t[8],h=t[9],d=t[10],M=t[11],m=t[12],v=t[13],g=t[14],b=t[15],p=n[0],x=n[1],w=n[2],E=n[3],y=n[4],_=n[5],T=n[6],A=n[7],R=n[8],P=n[9],S=n[10],L=n[11],q=n[12],I=n[13],U=n[14],V=n[15];return Math.abs(r-p)<=l*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(e-x)<=l*Math.max(1,Math.abs(e),Math.abs(x))&&Math.abs(u-w)<=l*Math.max(1,Math.abs(u),Math.abs(w))&&Math.abs(a-E)<=l*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(i-y)<=l*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(o-_)<=l*Math.max(1,Math.abs(o),Math.abs(_))&&Math.abs(s-T)<=l*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(c-A)<=l*Math.max(1,Math.abs(c),Math.abs(A))&&Math.abs(f-R)<=l*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(h-P)<=l*Math.max(1,Math.abs(h),Math.abs(P))&&Math.abs(d-S)<=l*Math.max(1,Math.abs(d),Math.abs(S))&&Math.abs(M-L)<=l*Math.max(1,Math.abs(M),Math.abs(L))&&Math.abs(m-q)<=l*Math.max(1,Math.abs(m),Math.abs(q))&&Math.abs(v-I)<=l*Math.max(1,Math.abs(v),Math.abs(I))&&Math.abs(g-U)<=l*Math.max(1,Math.abs(g),Math.abs(U))&&Math.abs(b-V)<=l*Math.max(1,Math.abs(b),Math.abs(V))}var jn=an,Yn=On;function Gn(){var t=new M(3);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Xn(t){var n=new M(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function zn(t){var n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function Wn(t,n,r){var e=new M(3);return e[0]=t,e[1]=n,e[2]=r,e}function kn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function Hn(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function Kn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function Qn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function Zn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function $n(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function Jn(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function tr(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function nr(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function rr(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function er(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function ur(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function ar(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function ir(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2];return Math.sqrt(r*r+e*e+u*u)}function or(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2];return r*r+e*e+u*u}function sr(t){var n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function cr(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function fr(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function hr(t,n){var r=n[0],e=n[1],u=n[2],a=r*r+e*e+u*u;return a>0&&(a=1/Math.sqrt(a),t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a),t}function dr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function lr(t,n,r){var e=n[0],u=n[1],a=n[2],i=r[0],o=r[1],s=r[2];return t[0]=u*s-a*o,t[1]=a*i-e*s,t[2]=e*o-u*i,t}function Mr(t,n,r,e){var u=n[0],a=n[1],i=n[2];return t[0]=u+e*(r[0]-u),t[1]=a+e*(r[1]-a),t[2]=i+e*(r[2]-i),t}function mr(t,n,r,e,u,a){var i=a*a,o=i*(2*a-3)+1,s=i*(a-2)+a,c=i*(a-1),f=i*(3-2*a);return t[0]=n[0]*o+r[0]*s+e[0]*c+u[0]*f,t[1]=n[1]*o+r[1]*s+e[1]*c+u[1]*f,t[2]=n[2]*o+r[2]*s+e[2]*c+u[2]*f,t}function vr(t,n,r,e,u,a){var i=1-a,o=i*i,s=a*a,c=o*i,f=3*a*o,h=3*s*i,d=s*a;return t[0]=n[0]*c+r[0]*f+e[0]*h+u[0]*d,t[1]=n[1]*c+r[1]*f+e[1]*h+u[1]*d,t[2]=n[2]*c+r[2]*f+e[2]*h+u[2]*d,t}function gr(t,n){n=n||1;var r=2*m()*Math.PI,e=2*m()-1,u=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*u,t[1]=Math.sin(r)*u,t[2]=e*n,t}function br(t,n,r){var e=n[0],u=n[1],a=n[2],i=r[3]*e+r[7]*u+r[11]*a+r[15];return i=i||1,t[0]=(r[0]*e+r[4]*u+r[8]*a+r[12])/i,t[1]=(r[1]*e+r[5]*u+r[9]*a+r[13])/i,t[2]=(r[2]*e+r[6]*u+r[10]*a+r[14])/i,t}function pr(t,n,r){var e=n[0],u=n[1],a=n[2];return t[0]=e*r[0]+u*r[3]+a*r[6],t[1]=e*r[1]+u*r[4]+a*r[7],t[2]=e*r[2]+u*r[5]+a*r[8],t}function xr(t,n,r){var e=r[0],u=r[1],a=r[2],i=r[3],o=n[0],s=n[1],c=n[2],f=u*c-a*s,h=a*o-e*c,d=e*s-u*o,l=u*d-a*h,M=a*f-e*d,m=e*h-u*f,v=2*i;return f*=v,h*=v,d*=v,l*=2,M*=2,m*=2,t[0]=o+f+l,t[1]=s+h+M,t[2]=c+d+m,t}function wr(t,n,r,e){var u=[],a=[];return u[0]=n[0]-r[0],u[1]=n[1]-r[1],u[2]=n[2]-r[2],a[0]=u[0],a[1]=u[1]*Math.cos(e)-u[2]*Math.sin(e),a[2]=u[1]*Math.sin(e)+u[2]*Math.cos(e),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Er(t,n,r,e){var u=[],a=[];return u[0]=n[0]-r[0],u[1]=n[1]-r[1],u[2]=n[2]-r[2],a[0]=u[2]*Math.sin(e)+u[0]*Math.cos(e),a[1]=u[1],a[2]=u[2]*Math.cos(e)-u[0]*Math.sin(e),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function yr(t,n,r,e){var u=[],a=[];return u[0]=n[0]-r[0],u[1]=n[1]-r[1],u[2]=n[2]-r[2],a[0]=u[0]*Math.cos(e)-u[1]*Math.sin(e),a[1]=u[0]*Math.sin(e)+u[1]*Math.cos(e),a[2]=u[2],t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function _r(t,n){var r=Wn(t[0],t[1],t[2]),e=Wn(n[0],n[1],n[2]);hr(r,r),hr(e,e);var u=dr(r,e);return u>1?0:u<-1?Math.PI:Math.acos(u)}function Tr(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Ar(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Rr(t,n){var r=t[0],e=t[1],u=t[2],a=n[0],i=n[1],o=n[2];return Math.abs(r-a)<=l*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-i)<=l*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(u-o)<=l*Math.max(1,Math.abs(u),Math.abs(o))}var Pr,Sr=Qn,Lr=Zn,qr=$n,Ir=ir,Ur=or,Vr=zn,Fr=sr,Or=(Pr=Gn(),function(t,n,r,e,u,a){var i=void 0,o=void 0;for(n||(n=3),r||(r=0),o=e?Math.min(e*n+r,t.length):t.length,i=r;i<o;i+=n)Pr[0]=t[i],Pr[1]=t[i+1],Pr[2]=t[i+2],u(Pr,Pr,a),t[i]=Pr[0],t[i+1]=Pr[1],t[i+2]=Pr[2];return t});function Cr(){var t=new M(4);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function Dr(t){var n=new M(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function Nr(t,n,r,e){var u=new M(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u}function Br(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function jr(t,n,r,e,u){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t}function Yr(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function Gr(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function Xr(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function zr(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function Wr(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function kr(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function Hr(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t}function Kr(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t}function Qr(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function Zr(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function $r(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}function Jr(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2],a=n[3]-t[3];return Math.sqrt(r*r+e*e+u*u+a*a)}function te(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2],a=n[3]-t[3];return r*r+e*e+u*u+a*a}function ne(t){var n=t[0],r=t[1],e=t[2],u=t[3];return Math.sqrt(n*n+r*r+e*e+u*u)}function re(t){var n=t[0],r=t[1],e=t[2],u=t[3];return n*n+r*r+e*e+u*u}function ee(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function ue(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function ae(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=r*r+e*e+u*u+a*a;return i>0&&(i=1/Math.sqrt(i),t[0]=r*i,t[1]=e*i,t[2]=u*i,t[3]=a*i),t}function ie(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function oe(t,n,r,e){var u=n[0],a=n[1],i=n[2],o=n[3];return t[0]=u+e*(r[0]-u),t[1]=a+e*(r[1]-a),t[2]=i+e*(r[2]-i),t[3]=o+e*(r[3]-o),t}function se(t,n){var r,e,u,a,i,o;n=n||1;do{i=(r=2*m()-1)*r+(e=2*m()-1)*e}while(i>=1);do{o=(u=2*m()-1)*u+(a=2*m()-1)*a}while(o>=1);var s=Math.sqrt((1-i)/o);return t[0]=n*r,t[1]=n*e,t[2]=n*u*s,t[3]=n*a*s,t}function ce(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3];return t[0]=r[0]*e+r[4]*u+r[8]*a+r[12]*i,t[1]=r[1]*e+r[5]*u+r[9]*a+r[13]*i,t[2]=r[2]*e+r[6]*u+r[10]*a+r[14]*i,t[3]=r[3]*e+r[7]*u+r[11]*a+r[15]*i,t}function fe(t,n,r){var e=n[0],u=n[1],a=n[2],i=r[0],o=r[1],s=r[2],c=r[3],f=c*e+o*a-s*u,h=c*u+s*e-i*a,d=c*a+i*u-o*e,l=-i*e-o*u-s*a;return t[0]=f*c+l*-i+h*-s-d*-o,t[1]=h*c+l*-o+d*-i-f*-s,t[2]=d*c+l*-s+f*-o-h*-i,t[3]=n[3],t}function he(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function de(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function le(t,n){var r=t[0],e=t[1],u=t[2],a=t[3],i=n[0],o=n[1],s=n[2],c=n[3];return Math.abs(r-i)<=l*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-o)<=l*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(u-s)<=l*Math.max(1,Math.abs(u),Math.abs(s))&&Math.abs(a-c)<=l*Math.max(1,Math.abs(a),Math.abs(c))}var Me=Gr,me=Xr,ve=zr,ge=Jr,be=te,pe=ne,xe=re,we=function(){var t=Cr();return function(n,r,e,u,a,i){var o=void 0,s=void 0;for(r||(r=4),e||(e=0),s=u?Math.min(u*r+e,n.length):n.length,o=e;o<s;o+=r)t[0]=n[o],t[1]=n[o+1],t[2]=n[o+2],t[3]=n[o+3],a(t,t,i),n[o]=t[0],n[o+1]=t[1],n[o+2]=t[2],n[o+3]=t[3];return n}}();function Ee(){var t=new M(4);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function ye(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function _e(t,n,r){r*=.5;var e=Math.sin(r);return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=Math.cos(r),t}function Te(t,n){var r=2*Math.acos(n[3]),e=Math.sin(r/2);return e>l?(t[0]=n[0]/e,t[1]=n[1]/e,t[2]=n[2]/e):(t[0]=1,t[1]=0,t[2]=0),r}function Ae(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=r[0],s=r[1],c=r[2],f=r[3];return t[0]=e*f+i*o+u*c-a*s,t[1]=u*f+i*s+a*o-e*c,t[2]=a*f+i*c+e*s-u*o,t[3]=i*f-e*o-u*s-a*c,t}function Re(t,n,r){r*=.5;var e=n[0],u=n[1],a=n[2],i=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s+i*o,t[1]=u*s+a*o,t[2]=a*s-u*o,t[3]=i*s-e*o,t}function Pe(t,n,r){r*=.5;var e=n[0],u=n[1],a=n[2],i=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s-a*o,t[1]=u*s+i*o,t[2]=a*s+e*o,t[3]=i*s-u*o,t}function Se(t,n,r){r*=.5;var e=n[0],u=n[1],a=n[2],i=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s+u*o,t[1]=u*s-e*o,t[2]=a*s+i*o,t[3]=i*s-a*o,t}function Le(t,n){var r=n[0],e=n[1],u=n[2];return t[0]=r,t[1]=e,t[2]=u,t[3]=Math.sqrt(Math.abs(1-r*r-e*e-u*u)),t}function qe(t,n,r,e){var u=n[0],a=n[1],i=n[2],o=n[3],s=r[0],c=r[1],f=r[2],h=r[3],d=void 0,M=void 0,m=void 0,v=void 0,g=void 0;return(M=u*s+a*c+i*f+o*h)<0&&(M=-M,s=-s,c=-c,f=-f,h=-h),1-M>l?(d=Math.acos(M),m=Math.sin(d),v=Math.sin((1-e)*d)/m,g=Math.sin(e*d)/m):(v=1-e,g=e),t[0]=v*u+g*s,t[1]=v*a+g*c,t[2]=v*i+g*f,t[3]=v*o+g*h,t}function Ie(t){var n=m(),r=m(),e=m(),u=Math.sqrt(1-n),a=Math.sqrt(n);return t[0]=u*Math.sin(2*Math.PI*r),t[1]=u*Math.cos(2*Math.PI*r),t[2]=a*Math.sin(2*Math.PI*e),t[3]=a*Math.cos(2*Math.PI*e),t}function Ue(t,n){var r=n[0],e=n[1],u=n[2],a=n[3],i=r*r+e*e+u*u+a*a,o=i?1/i:0;return t[0]=-r*o,t[1]=-e*o,t[2]=-u*o,t[3]=a*o,t}function Ve(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function Fe(t,n){var r=n[0]+n[4]+n[8],e=void 0;if(r>0)e=Math.sqrt(r+1),t[3]=.5*e,e=.5/e,t[0]=(n[5]-n[7])*e,t[1]=(n[6]-n[2])*e,t[2]=(n[1]-n[3])*e;else{var u=0;n[4]>n[0]&&(u=1),n[8]>n[3*u+u]&&(u=2);var a=(u+1)%3,i=(u+2)%3;e=Math.sqrt(n[3*u+u]-n[3*a+a]-n[3*i+i]+1),t[u]=.5*e,e=.5/e,t[3]=(n[3*a+i]-n[3*i+a])*e,t[a]=(n[3*a+u]+n[3*u+a])*e,t[i]=(n[3*i+u]+n[3*u+i])*e}return t}function Oe(t,n,r,e){var u=.5*Math.PI/180;n*=u,r*=u,e*=u;var a=Math.sin(n),i=Math.cos(n),o=Math.sin(r),s=Math.cos(r),c=Math.sin(e),f=Math.cos(e);return t[0]=a*s*f-i*o*c,t[1]=i*o*f+a*s*c,t[2]=i*s*c-a*o*f,t[3]=i*s*f+a*o*c,t}function Ce(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var De,Ne,Be,je,Ye,Ge,Xe=Dr,ze=Nr,We=Br,ke=jr,He=Yr,Ke=Ae,Qe=Zr,Ze=ie,$e=oe,Je=ne,tu=Je,nu=re,ru=nu,eu=ae,uu=de,au=le,iu=(De=Gn(),Ne=Wn(1,0,0),Be=Wn(0,1,0),function(t,n,r){var e=dr(n,r);return e<-.999999?(lr(De,Ne,n),Vr(De)<1e-6&&lr(De,Be,n),hr(De,De),_e(t,De,Math.PI),t):e>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(lr(De,n,r),t[0]=De[0],t[1]=De[1],t[2]=De[2],t[3]=1+e,eu(t,t))}),ou=(je=Ee(),Ye=Ee(),function(t,n,r,e,u,a){return qe(je,n,u,a),qe(Ye,r,e,a),qe(t,je,Ye,2*a*(1-a)),t}),su=(Ge=gt(),function(t,n,r,e){return Ge[0]=r[0],Ge[3]=r[1],Ge[6]=r[2],Ge[1]=e[0],Ge[4]=e[1],Ge[7]=e[2],Ge[2]=-n[0],Ge[5]=-n[1],Ge[8]=-n[2],eu(t,Fe(t,Ge))});function cu(){var t=new M(8);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t}function fu(t){var n=new M(8);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n}function hu(t,n,r,e,u,a,i,o){var s=new M(8);return s[0]=t,s[1]=n,s[2]=r,s[3]=e,s[4]=u,s[5]=a,s[6]=i,s[7]=o,s}function du(t,n,r,e,u,a,i){var o=new M(8);o[0]=t,o[1]=n,o[2]=r,o[3]=e;var s=.5*u,c=.5*a,f=.5*i;return o[4]=s*e+c*r-f*n,o[5]=c*e+f*t-s*r,o[6]=f*e+s*n-c*t,o[7]=-s*t-c*n-f*r,o}function lu(t,n,r){var e=.5*r[0],u=.5*r[1],a=.5*r[2],i=n[0],o=n[1],s=n[2],c=n[3];return t[0]=i,t[1]=o,t[2]=s,t[3]=c,t[4]=e*c+u*s-a*o,t[5]=u*c+a*i-e*s,t[6]=a*c+e*o-u*i,t[7]=-e*i-u*o-a*s,t}function Mu(t,n){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*n[0],t[5]=.5*n[1],t[6]=.5*n[2],t[7]=0,t}function mu(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function vu(t,n){var r=Ee();yn(r,n);var e=new M(3);return wn(e,n),lu(t,r,e),t}function gu(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}function bu(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function pu(t,n,r,e,u,a,i,o,s){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=a,t[5]=i,t[6]=o,t[7]=s,t}var xu=We;function wu(t,n){return t[0]=n[4],t[1]=n[5],t[2]=n[6],t[3]=n[7],t}var Eu=We;function yu(t,n){return t[4]=n[0],t[5]=n[1],t[6]=n[2],t[7]=n[3],t}function _u(t,n){var r=n[4],e=n[5],u=n[6],a=n[7],i=-n[0],o=-n[1],s=-n[2],c=n[3];return t[0]=2*(r*c+a*i+e*s-u*o),t[1]=2*(e*c+a*o+u*i-r*s),t[2]=2*(u*c+a*s+r*o-e*i),t}function Tu(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=.5*r[0],s=.5*r[1],c=.5*r[2],f=n[4],h=n[5],d=n[6],l=n[7];return t[0]=e,t[1]=u,t[2]=a,t[3]=i,t[4]=i*o+u*c-a*s+f,t[5]=i*s+a*o-e*c+h,t[6]=i*c+e*s-u*o+d,t[7]=-e*o-u*s-a*c+l,t}function Au(t,n,r){var e=-n[0],u=-n[1],a=-n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=o*i+f*e+s*a-c*u,d=s*i+f*u+c*e-o*a,l=c*i+f*a+o*u-s*e,M=f*i-o*e-s*u-c*a;return Re(t,n,r),e=t[0],u=t[1],a=t[2],i=t[3],t[4]=h*i+M*e+d*a-l*u,t[5]=d*i+M*u+l*e-h*a,t[6]=l*i+M*a+h*u-d*e,t[7]=M*i-h*e-d*u-l*a,t}function Ru(t,n,r){var e=-n[0],u=-n[1],a=-n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=o*i+f*e+s*a-c*u,d=s*i+f*u+c*e-o*a,l=c*i+f*a+o*u-s*e,M=f*i-o*e-s*u-c*a;return Pe(t,n,r),e=t[0],u=t[1],a=t[2],i=t[3],t[4]=h*i+M*e+d*a-l*u,t[5]=d*i+M*u+l*e-h*a,t[6]=l*i+M*a+h*u-d*e,t[7]=M*i-h*e-d*u-l*a,t}function Pu(t,n,r){var e=-n[0],u=-n[1],a=-n[2],i=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=o*i+f*e+s*a-c*u,d=s*i+f*u+c*e-o*a,l=c*i+f*a+o*u-s*e,M=f*i-o*e-s*u-c*a;return Se(t,n,r),e=t[0],u=t[1],a=t[2],i=t[3],t[4]=h*i+M*e+d*a-l*u,t[5]=d*i+M*u+l*e-h*a,t[6]=l*i+M*a+h*u-d*e,t[7]=M*i-h*e-d*u-l*a,t}function Su(t,n,r){var e=r[0],u=r[1],a=r[2],i=r[3],o=n[0],s=n[1],c=n[2],f=n[3];return t[0]=o*i+f*e+s*a-c*u,t[1]=s*i+f*u+c*e-o*a,t[2]=c*i+f*a+o*u-s*e,t[3]=f*i-o*e-s*u-c*a,o=n[4],s=n[5],c=n[6],f=n[7],t[4]=o*i+f*e+s*a-c*u,t[5]=s*i+f*u+c*e-o*a,t[6]=c*i+f*a+o*u-s*e,t[7]=f*i-o*e-s*u-c*a,t}function Lu(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=r[0],s=r[1],c=r[2],f=r[3];return t[0]=e*f+i*o+u*c-a*s,t[1]=u*f+i*s+a*o-e*c,t[2]=a*f+i*c+e*s-u*o,t[3]=i*f-e*o-u*s-a*c,o=r[4],s=r[5],c=r[6],f=r[7],t[4]=e*f+i*o+u*c-a*s,t[5]=u*f+i*s+a*o-e*c,t[6]=a*f+i*c+e*s-u*o,t[7]=i*f-e*o-u*s-a*c,t}function qu(t,n,r,e){if(Math.abs(e)<l)return gu(t,n);var u=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);e*=.5;var a=Math.sin(e),i=a*r[0]/u,o=a*r[1]/u,s=a*r[2]/u,c=Math.cos(e),f=n[0],h=n[1],d=n[2],M=n[3];t[0]=f*c+M*i+h*s-d*o,t[1]=h*c+M*o+d*i-f*s,t[2]=d*c+M*s+f*o-h*i,t[3]=M*c-f*i-h*o-d*s;var m=n[4],v=n[5],g=n[6],b=n[7];return t[4]=m*c+b*i+v*s-g*o,t[5]=v*c+b*o+g*i-m*s,t[6]=g*c+b*s+m*o-v*i,t[7]=b*c-m*i-v*o-g*s,t}function Iu(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t}function Uu(t,n,r){var e=n[0],u=n[1],a=n[2],i=n[3],o=r[4],s=r[5],c=r[6],f=r[7],h=n[4],d=n[5],l=n[6],M=n[7],m=r[0],v=r[1],g=r[2],b=r[3];return t[0]=e*b+i*m+u*g-a*v,t[1]=u*b+i*v+a*m-e*g,t[2]=a*b+i*g+e*v-u*m,t[3]=i*b-e*m-u*v-a*g,t[4]=e*f+i*o+u*c-a*s+h*b+M*m+d*g-l*v,t[5]=u*f+i*s+a*o-e*c+d*b+M*v+l*m-h*g,t[6]=a*f+i*c+e*s-u*o+l*b+M*g+h*v-d*m,t[7]=i*f-e*o-u*s-a*c+M*b-h*m-d*v-l*g,t}var Vu=Uu;function Fu(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t}var Ou=Ze;function Cu(t,n,r,e){var u=1-e;return Ou(n,r)<0&&(e=-e),t[0]=n[0]*u+r[0]*e,t[1]=n[1]*u+r[1]*e,t[2]=n[2]*u+r[2]*e,t[3]=n[3]*u+r[3]*e,t[4]=n[4]*u+r[4]*e,t[5]=n[5]*u+r[5]*e,t[6]=n[6]*u+r[6]*e,t[7]=n[7]*u+r[7]*e,t}function Du(t,n){var r=Yu(n);return t[0]=-n[0]/r,t[1]=-n[1]/r,t[2]=-n[2]/r,t[3]=n[3]/r,t[4]=-n[4]/r,t[5]=-n[5]/r,t[6]=-n[6]/r,t[7]=n[7]/r,t}function Nu(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t[4]=-n[4],t[5]=-n[5],t[6]=-n[6],t[7]=n[7],t}var Bu=Je,ju=Bu,Yu=nu,Gu=Yu;function Xu(t,n){var r=Yu(n);if(r>0){r=Math.sqrt(r);var e=n[0]/r,u=n[1]/r,a=n[2]/r,i=n[3]/r,o=n[4],s=n[5],c=n[6],f=n[7],h=e*o+u*s+a*c+i*f;t[0]=e,t[1]=u,t[2]=a,t[3]=i,t[4]=(o-e*h)/r,t[5]=(s-u*h)/r,t[6]=(c-a*h)/r,t[7]=(f-i*h)/r}return t}function zu(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"}function Wu(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]}function ku(t,n){var r=t[0],e=t[1],u=t[2],a=t[3],i=t[4],o=t[5],s=t[6],c=t[7],f=n[0],h=n[1],d=n[2],M=n[3],m=n[4],v=n[5],g=n[6],b=n[7];return Math.abs(r-f)<=l*Math.max(1,Math.abs(r),Math.abs(f))&&Math.abs(e-h)<=l*Math.max(1,Math.abs(e),Math.abs(h))&&Math.abs(u-d)<=l*Math.max(1,Math.abs(u),Math.abs(d))&&Math.abs(a-M)<=l*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(i-m)<=l*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(o-v)<=l*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(s-g)<=l*Math.max(1,Math.abs(s),Math.abs(g))&&Math.abs(c-b)<=l*Math.max(1,Math.abs(c),Math.abs(b))}function Hu(){var t=new M(2);return M!=Float32Array&&(t[0]=0,t[1]=0),t}function Ku(t){var n=new M(2);return n[0]=t[0],n[1]=t[1],n}function Qu(t,n){var r=new M(2);return r[0]=t,r[1]=n,r}function Zu(t,n){return t[0]=n[0],t[1]=n[1],t}function $u(t,n,r){return t[0]=n,t[1]=r,t}function Ju(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t}function ta(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function na(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function ra(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function ea(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t}function ua(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t}function aa(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t}function ia(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t}function oa(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t}function sa(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t}function ca(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t}function fa(t,n){var r=n[0]-t[0],e=n[1]-t[1];return Math.sqrt(r*r+e*e)}function ha(t,n){var r=n[0]-t[0],e=n[1]-t[1];return r*r+e*e}function da(t){var n=t[0],r=t[1];return Math.sqrt(n*n+r*r)}function la(t){var n=t[0],r=t[1];return n*n+r*r}function Ma(t,n){return t[0]=-n[0],t[1]=-n[1],t}function ma(t,n){return t[0]=1/n[0],t[1]=1/n[1],t}function va(t,n){var r=n[0],e=n[1],u=r*r+e*e;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u),t}function ga(t,n){return t[0]*n[0]+t[1]*n[1]}function ba(t,n,r){var e=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=e,t}function pa(t,n,r,e){var u=n[0],a=n[1];return t[0]=u+e*(r[0]-u),t[1]=a+e*(r[1]-a),t}function xa(t,n){n=n||1;var r=2*m()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t}function wa(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[2]*u,t[1]=r[1]*e+r[3]*u,t}function Ea(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[2]*u+r[4],t[1]=r[1]*e+r[3]*u+r[5],t}function ya(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[3]*u+r[6],t[1]=r[1]*e+r[4]*u+r[7],t}function _a(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[4]*u+r[12],t[1]=r[1]*e+r[5]*u+r[13],t}function Ta(t,n,r,e){var u=n[0]-r[0],a=n[1]-r[1],i=Math.sin(e),o=Math.cos(e);return t[0]=u*o-a*i+r[0],t[1]=u*i+a*o+r[1],t}function Aa(t,n){var r=t[0],e=t[1],u=n[0],a=n[1],i=r*r+e*e;i>0&&(i=1/Math.sqrt(i));var o=u*u+a*a;o>0&&(o=1/Math.sqrt(o));var s=(r*u+e*a)*i*o;return s>1?0:s<-1?Math.PI:Math.acos(s)}function Ra(t){return"vec2("+t[0]+", "+t[1]+")"}function Pa(t,n){return t[0]===n[0]&&t[1]===n[1]}function Sa(t,n){var r=t[0],e=t[1],u=n[0],a=n[1];return Math.abs(r-u)<=l*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-a)<=l*Math.max(1,Math.abs(e),Math.abs(a))}var La=da,qa=ta,Ia=na,Ua=ra,Va=fa,Fa=ha,Oa=la,Ca=function(){var t=Hu();return function(n,r,e,u,a,i){var o=void 0,s=void 0;for(r||(r=2),e||(e=0),s=u?Math.min(u*r+e,n.length):n.length,o=e;o<s;o+=r)t[0]=n[o],t[1]=n[o+1],a(t,t,i),n[o]=t[0],n[o+1]=t[1];return n}}();r.d(n,"glMatrix",function(){return e}),r.d(n,"mat2",function(){return u}),r.d(n,"mat2d",function(){return a}),r.d(n,"mat3",function(){return i}),r.d(n,"mat4",function(){return o}),r.d(n,"quat",function(){return f}),r.d(n,"quat2",function(){return h}),r.d(n,"vec2",function(){return d}),r.d(n,"vec3",function(){return s}),r.d(n,"vec4",function(){return c})},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0);n.isPowerOf2=function(t){return 0==(t&t-1)},n.toRadians=function(t){return t*Math.PI/180},n.randomInRange=function(t,n){return Math.random()*(n-t)+t},n.createTransformationMatrix=function(t,n,r){const u=e.mat4.create();return e.mat4.translate(u,u,t),e.mat4.rotate(u,u,n[0],e.vec3.fromValues(1,0,0)),e.mat4.rotate(u,u,n[1],e.vec3.fromValues(0,1,0)),e.mat4.rotate(u,u,n[2],e.vec3.fromValues(0,0,1)),e.mat4.scale(u,u,e.vec3.fromValues(r,r,r)),u}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(1);class u{constructor(t,n){this.gl=t,this.filepath=n,this.reflectivity=0,this.shineDamper=1,this.id=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this.id),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([0,0,255,255]))}getFilepath(){return this.filepath}getReflectivity(){return this.reflectivity}setReflectivity(t){this.reflectivity=t}getShineDamper(){return this.shineDamper}setShineDamper(t){this.shineDamper=t}loadImage(t){this.gl.bindTexture(this.gl.TEXTURE_2D,this.id),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,1),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t),e.isPowerOf2(t.width)&&e.isPowerOf2(t.height)?this.gl.generateMipmap(this.gl.TEXTURE_2D):(this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE))}bind(t=0){this.gl.activeTexture(this.gl.TEXTURE0+t),this.gl.bindTexture(this.gl.TEXTURE_2D,this.id)}unbind(){this.gl.bindTexture(this.gl.TEXTURE_2D,0)}clean(){this.gl.deleteTexture(this.id)}static load(t){return Promise.all(t.map(t=>u.loadImage(t)))}static loadImage(t){const n=t.getFilepath();return new Promise((r,e)=>{const u=new Image;u.onload=(()=>{t.loadImage(u),r(u)}),u.onerror=(()=>e(u)),u.src=n})}}n.default=u},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});class e{static init(){window.addEventListener("keydown",t=>{this.keys.set(t.code,!0)}),window.addEventListener("keyup",t=>{this.keys.set(t.code,!1)})}static isPressed(t){return!!this.keys.has(t)&&this.keys.get(t)}}e.keys=new Map,n.default=e},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});class e{constructor(t,n,r){this.type=t,this.count=n,this.normalized=r}getType(){return this.type}getCount(){return this.count}isNormalized(){return this.normalized}static getSizeOfType(t,n){switch(n){case t.FLOAT:case t.UNSIGNED_INT:return 4;case t.UNSIGNED_BYTE:return 1}return console.log("getSizeOfType: unknown type"),0}}n.VertexBufferElement=e;n.default=class{constructor(t){this.gl=t,this.elements=[],this.stride=0}getElements(){return this.elements}getStride(){return this.stride}pushFloat(t){this.elements.push(new e(this.gl.FLOAT,t,!1)),this.stride+=t*e.getSizeOfType(this.gl,this.gl.FLOAT)}pushInt(t){this.elements.push(new e(this.gl.UNSIGNED_INT,t,!1)),this.stride+=t*e.getSizeOfType(this.gl,this.gl.UNSIGNED_INT)}pushByte(t){this.elements.push(new e(this.gl.UNSIGNED_BYTE,t,!0)),this.stride+=t*e.getSizeOfType(this.gl,this.gl.UNSIGNED_BYTE)}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),u=r(6),a=r(2),i=r(3),o=r(7),s=r(8),c=r(14),f=r(15),h=r(1),d=r(19),l=new u.default;let M;const m=new Set;let v,g;let b=0;const p=1/30;function x(t){const n=t.canvas;var r=n.width/n.height,e=window.innerHeight,u=e*r;r!=16/9&&(e=(u=window.innerWidth)/(16/9)),n.width=u,n.height=e,t.viewport(0,0,u,e)}window.addEventListener("load",function(){const t=document.getElementById("canvas");if(!(t instanceof HTMLCanvasElement))throw new Error("The provided element is not a canvas element.");const n=t.getContext("webgl2");if(!(n instanceof WebGL2RenderingContext))throw alert("Unable to initialize WebGL. Your browser or machine may not support it."),new Error("Unable to initialize WebGL. Your browser or machine may not support it.");l.info(n.getParameter(n.VERSION)),window.addEventListener("resize",()=>x(n),!1),x(n),M=new f.default(n);const r=new a.default(n,"./res/white.png"),u=new s.default(r,"./res/dragon.obj");r.setShineDamper(10),r.setReflectivity(1),g=new o.default(u,e.vec3.fromValues(0,0,-25),e.vec3.fromValues(0,0,0),1),m.add(g);const w=new s.default(new a.default(n,"./res/tree.png"),"./res/tree.obj");for(let t=0;t<150;t++)m.add(new o.default(w,e.vec3.fromValues(h.randomInRange(-40,40),0,h.randomInRange(-40,40)),e.vec3.fromValues(0,0,0),2));const E=new s.default(new a.default(n,"./res/box.png"),"./res/box.obj");for(let t=0;t<20;t++)m.add(new o.default(E,e.vec3.fromValues(h.randomInRange(-40,40),.75,h.randomInRange(-40,40)),e.vec3.fromValues(0,h.randomInRange(0,360),0),1));Promise.all([M.getStaticShader().parseShader("./shaders/vertexShader.glsl","./shaders/fragmentShader.glsl"),...s.default.load(n,[u,E,w])]).then(()=>{!function(t,n){const r=new d.default(70,t.width/t.height,.1,1e3);M.getRenderer().loadProjectionMatrix(M.getStaticShader(),r),v=new c.default(e.vec3.fromValues(0,0,-20),e.vec3.fromValues(1,1,1)),i.default.init(),requestAnimationFrame(t=>(function t(n,r,e){let u=r-b;u>p&&(u=p),M.clear(),e.update(),g.increaseRotation(0,.005,0),m.forEach(t=>M.processEntity(t)),M.render(v,e),requestAnimationFrame(r=>t(n,r,e))})(n,t,r))}(t,n)})})},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});class e{debug(t,...n){e.emitLogMessage("debug",t,n)}info(t,...n){e.emitLogMessage("info",t,n)}warn(t,...n){e.emitLogMessage("warn",t,n)}error(t,...n){e.emitLogMessage("error",t,n)}static emitLogMessage(t,n,r){r.length>0?console[t](n,r):console[t](n)}}n.default=e},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0);n.default=class{constructor(t,n,r,e){this.model=t,this.position=n,this.rotation=r,this.scale=e}getModel(){return this.model}getPosition(){return this.position}setPosition(t,n,r){e.vec3.set(this.position,t,n,r)}increasePosition(t,n,r){e.vec3.add(this.position,this.position,e.vec3.fromValues(t,n,r))}getRotation(){return this.rotation}setRotation(t,n,r){e.vec3.set(this.rotation,t,n,r)}increaseRotation(t,n,r){e.vec3.add(this.rotation,this.rotation,e.vec3.fromValues(t,n,r))}getScale(){return this.scale}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(9),u=r(2),a=r(10);n.default=class extends e.default{constructor(t,n){super(n),this.texture=t}getTexture(){return this.texture}static load(t,n){const r=[];return n.forEach(n=>{r.push(u.default.loadImage(n.getTexture()),a.default.loadModel(t,n))}),r}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t){this.filepath=t}getFilepath(){return this.filepath}getVertexArray(){return this.va}getIndexBuffer(){return this.ib}load(t,n){this.va=t,this.ib=n}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */var e=this&&this.__awaiter||function(t,n,r,e){return new(r||(r=Promise))(function(u,a){function i(t){try{s(e.next(t))}catch(t){a(t)}}function o(t){try{s(e.throw(t))}catch(t){a(t)}}function s(t){t.done?u(t.value):new r(function(n){n(t.value)}).then(i,o)}s((e=e.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const u=r(0),a=r(11),i=r(4),o=r(12),s=r(13);class c{static loadModels(t,n){return Promise.all(n.map(n=>c.loadModel(t,n)))}static loadModel(t,n){return e(this,void 0,void 0,function*(){const r=[],e=[],c=[],f=[],h=[],d=[],l=yield fetch(n.getFilepath());(yield l.text()).split(/\r\n|\n/).forEach(t=>{const n=t.split(" ");if(t.startsWith("v "))r.push(u.vec3.fromValues(Number(n[1]),Number(n[2]),Number(n[3])));else if(t.startsWith("vt "))e.push(u.vec2.fromValues(Number(n[1]),Number(n[2])));else if(t.startsWith("vn "))c.push(u.vec3.fromValues(Number(n[1]),Number(n[2]),Number(n[3])));else if(t.startsWith("f ")){const t=n[1].split("/"),r=n[2].split("/"),u=n[3].split("/");this.processVertex(t,f,e,c,h,d),this.processVertex(r,f,e,c,h,d),this.processVertex(u,f,e,c,h,d)}});const M=[];let m=0;r.forEach(t=>{M[m++]=t[0],M[m++]=t[1],M[m++]=t[2]});const v=[];let g=0,b=0,p=0;const x=Math.floor(M.length/3);for(let t=0;t<x;t++)v.push(M[g++],M[g++],M[g++],h[b++],h[b++],d[p++],d[p++],d[p++]);const w=new a.default(t),E=new o.default(t,v),y=new i.default(t);y.pushFloat(3),y.pushFloat(2),y.pushFloat(3),w.addBuffer(E,y);const _=new s.default(t,f,f.length);n.load(w,_)})}static processVertex(t,n,r,e,u,a){const i=Number(t[0])-1;n.push(i);const o=r[Number(t[1])-1];u[2*i]=o[0],u[2*i+1]=o[1];const s=e[Number(t[2])-1];a[3*i]=s[0],a[3*i+1]=s[1],a[3*i+2]=s[2]}}n.default=c},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(4);n.default=class{constructor(t){this.gl=t,this.id=this.gl.createVertexArray()}addBuffer(t,n){this.bind(),t.bind();const r=n.getElements();let u=0;for(let t=0;t<r.length;t++){const a=r[t];this.gl.enableVertexAttribArray(t),this.gl.vertexAttribPointer(t,a.getCount(),a.getType(),a.isNormalized(),n.getStride(),u),u+=a.getCount()*e.VertexBufferElement.getSizeOfType(this.gl,a.getType())}}bind(){this.gl.bindVertexArray(this.id)}unbind(){this.gl.bindVertexArray(null)}clean(){this.gl.deleteVertexArray(this.id)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){this.gl=t,this.id=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.id),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(n),this.gl.STATIC_DRAW)}bind(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.id)}unbind(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null)}clean(){this.gl.deleteBuffer(this.id)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n,r){this.gl=t,this.count=r,this.id=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.id),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(n),this.gl.STATIC_DRAW)}getCount(){return this.count}bind(){this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.id)}unbind(){this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)}clean(){this.gl.deleteBuffer(this.id)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){this.position=t,this.color=n}getPosition(){return this.position}getColor(){return this.color}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(16),u=r(18);n.default=class{constructor(t){this.gl=t,this.modelCache=new Map,this.renderer=new u.default(t),this.shader=new e.default(t)}getRenderer(){return this.renderer}getStaticShader(){return this.shader}render(t,n){this.clear(),this.shader.bind(),this.shader.loadLight(t),this.shader.loadViewMatrix(n),this.renderer.render(this.modelCache,this.shader),this.modelCache.clear()}processEntity(t){this.modelCache.has(t.getModel())?this.modelCache.get(t.getModel()).add(t):this.modelCache.set(t.getModel(),new Set([t]))}clear(){this.gl.clearColor(0,0,.5,1),this.gl.clearDepth(1),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(17);n.default=class extends e.default{loadViewMatrix(t){this.setUniformMat4f("uViewMatrix",t.createViewMatrix())}loadLight(t){this.setUniformVec3f("uLightPosition",t.getPosition()),this.setUniformVec3f("uLightColor",t.getColor())}loadShineVariables(t,n){this.setUniform1f("uShineDamper",t),this.setUniform1f("uReflectivity",n)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */var e=this&&this.__awaiter||function(t,n,r,e){return new(r||(r=Promise))(function(u,a){function i(t){try{s(e.next(t))}catch(t){a(t)}}function o(t){try{s(e.throw(t))}catch(t){a(t)}}function s(t){t.done?u(t.value):new r(function(n){n(t.value)}).then(i,o)}s((e=e.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t){this.gl=t,this.id=null,this.uniformLocationCache=new Map}parseShader(t,n){return e(this,void 0,void 0,function*(){let r,e;return Promise.all([fetch(t).then(t=>t.text().then(t=>r=t)),fetch(n).then(t=>t.text().then(t=>e=t))]).then(()=>{this.id=this.initShaderProgram(r,e)})})}initShaderProgram(t,n){const r=this.loadShader(this.gl.VERTEX_SHADER,t),e=this.loadShader(this.gl.FRAGMENT_SHADER,n),u=this.gl.createProgram();return this.gl.attachShader(u,r),this.gl.attachShader(u,e),this.gl.linkProgram(u),this.gl.getProgramParameter(u,this.gl.LINK_STATUS)?u:(console.log("Unable to initialize the shader program: "+this.gl.getProgramInfoLog(u)),null)}loadShader(t,n){const r=this.gl.createShader(t);return this.gl.shaderSource(r,n),this.gl.compileShader(r),this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(console.log("An error occurred compiling the shaders: "+this.gl.getShaderInfoLog(r)),this.gl.deleteShader(r),null)}bind(){this.gl.useProgram(this.id)}unbind(){this.gl.useProgram(null)}clean(){this.gl.deleteProgram(this.id)}setUniform1i(t,n){this.gl.uniform1i(this.getUniformLocation(t),n)}setUniform1f(t,n){this.gl.uniform1f(this.getUniformLocation(t),n)}setUniform4f(t,n,r,e,u){this.gl.uniform4f(this.getUniformLocation(t),n,r,e,u)}setUniformVec3f(t,n){this.gl.uniform3fv(this.getUniformLocation(t),n)}setUniformMat4f(t,n){this.gl.uniformMatrix4fv(this.getUniformLocation(t),!1,n)}getUniformLocation(t){if(this.uniformLocationCache.has(t))return this.uniformLocationCache.get(t);const n=this.gl.getUniformLocation(this.id,t);return-1===n&&console.log(`Warning: uniform '${t}' doesn't exist!`),this.uniformLocationCache.set(t,n),n}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(1);n.default=class{constructor(t){this.gl=t,t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.enable(t.CULL_FACE),t.cullFace(t.BACK),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.clearColor(1,1,1,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}getRenderingContext(){return this.gl}render(t,n){t.forEach((t,r)=>{r.getVertexArray().bind(),r.getIndexBuffer().bind(),r.getTexture().bind(),n.loadShineVariables(r.getTexture().getShineDamper(),r.getTexture().getReflectivity()),t.forEach(t=>{n.setUniformMat4f("uTransformationMatrix",e.createTransformationMatrix(t.getPosition(),t.getRotation(),t.getScale())),this.gl.drawElements(this.gl.TRIANGLES,r.getIndexBuffer().getCount(),this.gl.UNSIGNED_INT,0)}),r.getVertexArray().unbind(),r.getIndexBuffer().unbind()})}enableCulling(){this.gl.enable(this.gl.CULL_FACE),this.gl.cullFace(this.gl.BACK)}disableCulling(){this.gl.disable(this.gl.CULL_FACE)}loadProjectionMatrix(t,n){t.bind(),t.setUniformMat4f("uProjectionMatrix",n.createProjectionMatrix())}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),u=r(20),a=r(3);class i extends u.default{update(){a.default.isPressed("KeyW")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,0,-i.CAMERA_VELOCITY)),a.default.isPressed("KeyS")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,0,i.CAMERA_VELOCITY)),a.default.isPressed("KeyA")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(-i.CAMERA_VELOCITY,0,0)),a.default.isPressed("KeyD")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(i.CAMERA_VELOCITY,0,0)),a.default.isPressed("Space")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,i.CAMERA_VELOCITY,0)),a.default.isPressed("ShiftLeft")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,-i.CAMERA_VELOCITY,0))}calculateZoom(){throw new Error("Method not implemented.")}}i.CAMERA_VELOCITY=.05,n.default=i},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),u=r(21),a=r(1);n.default=class{constructor(t,n,r,a){this.fov=t,this.aspectRatio=n,this.nearPlane=r,this.farPlane=a,this.position=e.vec3.fromValues(0,0,0),this.rotation=e.vec3.fromValues(0,0,0),this.angleAroundOrigin=new u.default(0,10),this.distanceFromOrigin=new u.default(30,5)}getFov(){return this.fov}getPosition(){return this.position}setPosition(t,n,r){e.vec3.set(this.position,t,n,r)}getPitch(){return this.rotation[0]}getYaw(){return this.rotation[1]}getRoll(){return this.rotation[2]}createViewMatrix(){const t=e.mat4.create();e.mat4.rotate(t,t,a.toRadians(this.rotation[0]),[1,0,0]),e.mat4.rotate(t,t,a.toRadians(this.rotation[1]),[0,1,0]),e.mat4.rotate(t,t,a.toRadians(this.rotation[2]),[0,0,1]);const n=e.vec3.fromValues(-this.position[0],-this.position[1],-this.position[2]);return e.mat4.translate(t,t,n),t}createProjectionMatrix(){return e.mat4.perspective(e.mat4.create(),a.toRadians(this.fov),this.aspectRatio,this.nearPlane,this.farPlane)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){this.agility=n,this.target=t,this.actual=t}update(t){const n=(this.target-this.actual)*t*this.agility;this.actual+=n}setTarget(t){this.target=t}increaseTarget(t){this.target+=t}get(){return this.actual}getTarget(){return this.target}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,