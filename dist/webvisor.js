!function(t){var n={};function r(e){if(n[e])return n[e].exports;var u=n[e]={i:e,l:!1,exports:{}};return t[e].call(u.exports,u,u.exports,r),u.l=!0,u.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)r.d(e,u,function(n){return t[n]}.bind(null,u));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=10)}([function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"EPSILON",function(){return l}),r.d(e,"ARRAY_TYPE",function(){return M}),r.d(e,"RANDOM",function(){return g}),r.d(e,"setMatrixArrayType",function(){return m}),r.d(e,"toRadian",function(){return b}),r.d(e,"equals",function(){return p});var u={};r.r(u),r.d(u,"create",function(){return E}),r.d(u,"clone",function(){return x}),r.d(u,"copy",function(){return w}),r.d(u,"identity",function(){return T}),r.d(u,"fromValues",function(){return y}),r.d(u,"set",function(){return _}),r.d(u,"transpose",function(){return R}),r.d(u,"invert",function(){return S}),r.d(u,"adjoint",function(){return A}),r.d(u,"determinant",function(){return P}),r.d(u,"multiply",function(){return V}),r.d(u,"rotate",function(){return U}),r.d(u,"scale",function(){return I}),r.d(u,"fromRotation",function(){return L}),r.d(u,"fromScaling",function(){return q}),r.d(u,"str",function(){return O}),r.d(u,"frob",function(){return F}),r.d(u,"LDU",function(){return N}),r.d(u,"add",function(){return C}),r.d(u,"subtract",function(){return D}),r.d(u,"exactEquals",function(){return B}),r.d(u,"equals",function(){return j}),r.d(u,"multiplyScalar",function(){return X}),r.d(u,"multiplyScalarAndAdd",function(){return Y}),r.d(u,"mul",function(){return G}),r.d(u,"sub",function(){return z});var i={};r.r(i),r.d(i,"create",function(){return W}),r.d(i,"clone",function(){return Z}),r.d(i,"copy",function(){return k}),r.d(i,"identity",function(){return H}),r.d(i,"fromValues",function(){return Q}),r.d(i,"set",function(){return K}),r.d(i,"invert",function(){return $}),r.d(i,"determinant",function(){return J}),r.d(i,"multiply",function(){return tt}),r.d(i,"rotate",function(){return nt}),r.d(i,"scale",function(){return rt}),r.d(i,"translate",function(){return et}),r.d(i,"fromRotation",function(){return ut}),r.d(i,"fromScaling",function(){return it}),r.d(i,"fromTranslation",function(){return at}),r.d(i,"str",function(){return ot}),r.d(i,"frob",function(){return st}),r.d(i,"add",function(){return ct}),r.d(i,"subtract",function(){return ft}),r.d(i,"multiplyScalar",function(){return ht}),r.d(i,"multiplyScalarAndAdd",function(){return dt}),r.d(i,"exactEquals",function(){return lt}),r.d(i,"equals",function(){return Mt}),r.d(i,"mul",function(){return gt}),r.d(i,"sub",function(){return mt});var a={};r.r(a),r.d(a,"create",function(){return vt}),r.d(a,"fromMat4",function(){return bt}),r.d(a,"clone",function(){return pt}),r.d(a,"copy",function(){return Et}),r.d(a,"fromValues",function(){return xt}),r.d(a,"set",function(){return wt}),r.d(a,"identity",function(){return Tt}),r.d(a,"transpose",function(){return yt}),r.d(a,"invert",function(){return _t}),r.d(a,"adjoint",function(){return Rt}),r.d(a,"determinant",function(){return St}),r.d(a,"multiply",function(){return At}),r.d(a,"translate",function(){return Pt}),r.d(a,"rotate",function(){return Vt}),r.d(a,"scale",function(){return Ut}),r.d(a,"fromTranslation",function(){return It}),r.d(a,"fromRotation",function(){return Lt}),r.d(a,"fromScaling",function(){return qt}),r.d(a,"fromMat2d",function(){return Ot}),r.d(a,"fromQuat",function(){return Ft}),r.d(a,"normalFromMat4",function(){return Nt}),r.d(a,"projection",function(){return Ct}),r.d(a,"str",function(){return Dt}),r.d(a,"frob",function(){return Bt}),r.d(a,"add",function(){return jt}),r.d(a,"subtract",function(){return Xt}),r.d(a,"multiplyScalar",function(){return Yt}),r.d(a,"multiplyScalarAndAdd",function(){return Gt}),r.d(a,"exactEquals",function(){return zt}),r.d(a,"equals",function(){return Wt}),r.d(a,"mul",function(){return Zt}),r.d(a,"sub",function(){return kt});var o={};r.r(o),r.d(o,"create",function(){return Ht}),r.d(o,"clone",function(){return Qt}),r.d(o,"copy",function(){return Kt}),r.d(o,"fromValues",function(){return $t}),r.d(o,"set",function(){return Jt}),r.d(o,"identity",function(){return tn}),r.d(o,"transpose",function(){return nn}),r.d(o,"invert",function(){return rn}),r.d(o,"adjoint",function(){return en}),r.d(o,"determinant",function(){return un}),r.d(o,"multiply",function(){return an}),r.d(o,"translate",function(){return on}),r.d(o,"scale",function(){return sn}),r.d(o,"rotate",function(){return cn}),r.d(o,"rotateX",function(){return fn}),r.d(o,"rotateY",function(){return hn}),r.d(o,"rotateZ",function(){return dn}),r.d(o,"fromTranslation",function(){return ln}),r.d(o,"fromScaling",function(){return Mn}),r.d(o,"fromRotation",function(){return gn}),r.d(o,"fromXRotation",function(){return mn}),r.d(o,"fromYRotation",function(){return vn}),r.d(o,"fromZRotation",function(){return bn}),r.d(o,"fromRotationTranslation",function(){return pn}),r.d(o,"fromQuat2",function(){return En}),r.d(o,"getTranslation",function(){return xn}),r.d(o,"getScaling",function(){return wn}),r.d(o,"getRotation",function(){return Tn}),r.d(o,"fromRotationTranslationScale",function(){return yn}),r.d(o,"fromRotationTranslationScaleOrigin",function(){return _n}),r.d(o,"fromQuat",function(){return Rn}),r.d(o,"frustum",function(){return Sn}),r.d(o,"perspective",function(){return An}),r.d(o,"perspectiveFromFieldOfView",function(){return Pn}),r.d(o,"ortho",function(){return Vn}),r.d(o,"lookAt",function(){return Un}),r.d(o,"targetTo",function(){return In}),r.d(o,"str",function(){return Ln}),r.d(o,"frob",function(){return qn}),r.d(o,"add",function(){return On}),r.d(o,"subtract",function(){return Fn}),r.d(o,"multiplyScalar",function(){return Nn}),r.d(o,"multiplyScalarAndAdd",function(){return Cn}),r.d(o,"exactEquals",function(){return Dn}),r.d(o,"equals",function(){return Bn}),r.d(o,"mul",function(){return jn}),r.d(o,"sub",function(){return Xn});var s={};r.r(s),r.d(s,"create",function(){return Yn}),r.d(s,"clone",function(){return Gn}),r.d(s,"length",function(){return zn}),r.d(s,"fromValues",function(){return Wn}),r.d(s,"copy",function(){return Zn}),r.d(s,"set",function(){return kn}),r.d(s,"add",function(){return Hn}),r.d(s,"subtract",function(){return Qn}),r.d(s,"multiply",function(){return Kn}),r.d(s,"divide",function(){return $n}),r.d(s,"ceil",function(){return Jn}),r.d(s,"floor",function(){return tr}),r.d(s,"min",function(){return nr}),r.d(s,"max",function(){return rr}),r.d(s,"round",function(){return er}),r.d(s,"scale",function(){return ur}),r.d(s,"scaleAndAdd",function(){return ir}),r.d(s,"distance",function(){return ar}),r.d(s,"squaredDistance",function(){return or}),r.d(s,"squaredLength",function(){return sr}),r.d(s,"negate",function(){return cr}),r.d(s,"inverse",function(){return fr}),r.d(s,"normalize",function(){return hr}),r.d(s,"dot",function(){return dr}),r.d(s,"cross",function(){return lr}),r.d(s,"lerp",function(){return Mr}),r.d(s,"hermite",function(){return gr}),r.d(s,"bezier",function(){return mr}),r.d(s,"random",function(){return vr}),r.d(s,"transformMat4",function(){return br}),r.d(s,"transformMat3",function(){return pr}),r.d(s,"transformQuat",function(){return Er}),r.d(s,"rotateX",function(){return xr}),r.d(s,"rotateY",function(){return wr}),r.d(s,"rotateZ",function(){return Tr}),r.d(s,"angle",function(){return yr}),r.d(s,"str",function(){return _r}),r.d(s,"exactEquals",function(){return Rr}),r.d(s,"equals",function(){return Sr}),r.d(s,"sub",function(){return Pr}),r.d(s,"mul",function(){return Vr}),r.d(s,"div",function(){return Ur}),r.d(s,"dist",function(){return Ir}),r.d(s,"sqrDist",function(){return Lr}),r.d(s,"len",function(){return qr}),r.d(s,"sqrLen",function(){return Or}),r.d(s,"forEach",function(){return Fr});var c={};r.r(c),r.d(c,"create",function(){return Nr}),r.d(c,"clone",function(){return Cr}),r.d(c,"fromValues",function(){return Dr}),r.d(c,"copy",function(){return Br}),r.d(c,"set",function(){return jr}),r.d(c,"add",function(){return Xr}),r.d(c,"subtract",function(){return Yr}),r.d(c,"multiply",function(){return Gr}),r.d(c,"divide",function(){return zr}),r.d(c,"ceil",function(){return Wr}),r.d(c,"floor",function(){return Zr}),r.d(c,"min",function(){return kr}),r.d(c,"max",function(){return Hr}),r.d(c,"round",function(){return Qr}),r.d(c,"scale",function(){return Kr}),r.d(c,"scaleAndAdd",function(){return $r}),r.d(c,"distance",function(){return Jr}),r.d(c,"squaredDistance",function(){return te}),r.d(c,"length",function(){return ne}),r.d(c,"squaredLength",function(){return re}),r.d(c,"negate",function(){return ee}),r.d(c,"inverse",function(){return ue}),r.d(c,"normalize",function(){return ie}),r.d(c,"dot",function(){return ae}),r.d(c,"lerp",function(){return oe}),r.d(c,"random",function(){return se}),r.d(c,"transformMat4",function(){return ce}),r.d(c,"transformQuat",function(){return fe}),r.d(c,"str",function(){return he}),r.d(c,"exactEquals",function(){return de}),r.d(c,"equals",function(){return le}),r.d(c,"sub",function(){return Me}),r.d(c,"mul",function(){return ge}),r.d(c,"div",function(){return me}),r.d(c,"dist",function(){return ve}),r.d(c,"sqrDist",function(){return be}),r.d(c,"len",function(){return pe}),r.d(c,"sqrLen",function(){return Ee}),r.d(c,"forEach",function(){return xe});var f={};r.r(f),r.d(f,"create",function(){return we}),r.d(f,"identity",function(){return Te}),r.d(f,"setAxisAngle",function(){return ye}),r.d(f,"getAxisAngle",function(){return _e}),r.d(f,"multiply",function(){return Re}),r.d(f,"rotateX",function(){return Se}),r.d(f,"rotateY",function(){return Ae}),r.d(f,"rotateZ",function(){return Pe}),r.d(f,"calculateW",function(){return Ve}),r.d(f,"slerp",function(){return Ue}),r.d(f,"random",function(){return Ie}),r.d(f,"invert",function(){return Le}),r.d(f,"conjugate",function(){return qe}),r.d(f,"fromMat3",function(){return Oe}),r.d(f,"fromEuler",function(){return Fe}),r.d(f,"str",function(){return Ne}),r.d(f,"clone",function(){return Ge}),r.d(f,"fromValues",function(){return ze}),r.d(f,"copy",function(){return We}),r.d(f,"set",function(){return Ze}),r.d(f,"add",function(){return ke}),r.d(f,"mul",function(){return He}),r.d(f,"scale",function(){return Qe}),r.d(f,"dot",function(){return Ke}),r.d(f,"lerp",function(){return $e}),r.d(f,"length",function(){return Je}),r.d(f,"len",function(){return tu}),r.d(f,"squaredLength",function(){return nu}),r.d(f,"sqrLen",function(){return ru}),r.d(f,"normalize",function(){return eu}),r.d(f,"exactEquals",function(){return uu}),r.d(f,"equals",function(){return iu}),r.d(f,"rotationTo",function(){return au}),r.d(f,"sqlerp",function(){return ou}),r.d(f,"setAxes",function(){return su});var h={};r.r(h),r.d(h,"create",function(){return cu}),r.d(h,"clone",function(){return fu}),r.d(h,"fromValues",function(){return hu}),r.d(h,"fromRotationTranslationValues",function(){return du}),r.d(h,"fromRotationTranslation",function(){return lu}),r.d(h,"fromTranslation",function(){return Mu}),r.d(h,"fromRotation",function(){return gu}),r.d(h,"fromMat4",function(){return mu}),r.d(h,"copy",function(){return vu}),r.d(h,"identity",function(){return bu}),r.d(h,"set",function(){return pu}),r.d(h,"getReal",function(){return Eu}),r.d(h,"getDual",function(){return xu}),r.d(h,"setReal",function(){return wu}),r.d(h,"setDual",function(){return Tu}),r.d(h,"getTranslation",function(){return yu}),r.d(h,"translate",function(){return _u}),r.d(h,"rotateX",function(){return Ru}),r.d(h,"rotateY",function(){return Su}),r.d(h,"rotateZ",function(){return Au}),r.d(h,"rotateByQuatAppend",function(){return Pu}),r.d(h,"rotateByQuatPrepend",function(){return Vu}),r.d(h,"rotateAroundAxis",function(){return Uu}),r.d(h,"add",function(){return Iu}),r.d(h,"multiply",function(){return Lu}),r.d(h,"mul",function(){return qu}),r.d(h,"scale",function(){return Ou}),r.d(h,"dot",function(){return Fu}),r.d(h,"lerp",function(){return Nu}),r.d(h,"invert",function(){return Cu}),r.d(h,"conjugate",function(){return Du}),r.d(h,"length",function(){return Bu}),r.d(h,"len",function(){return ju}),r.d(h,"squaredLength",function(){return Xu}),r.d(h,"sqrLen",function(){return Yu}),r.d(h,"normalize",function(){return Gu}),r.d(h,"str",function(){return zu}),r.d(h,"exactEquals",function(){return Wu}),r.d(h,"equals",function(){return Zu});var d={};r.r(d),r.d(d,"create",function(){return ku}),r.d(d,"clone",function(){return Hu}),r.d(d,"fromValues",function(){return Qu}),r.d(d,"copy",function(){return Ku}),r.d(d,"set",function(){return $u}),r.d(d,"add",function(){return Ju}),r.d(d,"subtract",function(){return ti}),r.d(d,"multiply",function(){return ni}),r.d(d,"divide",function(){return ri}),r.d(d,"ceil",function(){return ei}),r.d(d,"floor",function(){return ui}),r.d(d,"min",function(){return ii}),r.d(d,"max",function(){return ai}),r.d(d,"round",function(){return oi}),r.d(d,"scale",function(){return si}),r.d(d,"scaleAndAdd",function(){return ci}),r.d(d,"distance",function(){return fi}),r.d(d,"squaredDistance",function(){return hi}),r.d(d,"length",function(){return di}),r.d(d,"squaredLength",function(){return li}),r.d(d,"negate",function(){return Mi}),r.d(d,"inverse",function(){return gi}),r.d(d,"normalize",function(){return mi}),r.d(d,"dot",function(){return vi}),r.d(d,"cross",function(){return bi}),r.d(d,"lerp",function(){return pi}),r.d(d,"random",function(){return Ei}),r.d(d,"transformMat2",function(){return xi}),r.d(d,"transformMat2d",function(){return wi}),r.d(d,"transformMat3",function(){return Ti}),r.d(d,"transformMat4",function(){return yi}),r.d(d,"rotate",function(){return _i}),r.d(d,"angle",function(){return Ri}),r.d(d,"str",function(){return Si}),r.d(d,"exactEquals",function(){return Ai}),r.d(d,"equals",function(){return Pi}),r.d(d,"len",function(){return Vi}),r.d(d,"sub",function(){return Ui}),r.d(d,"mul",function(){return Ii}),r.d(d,"div",function(){return Li}),r.d(d,"dist",function(){return qi}),r.d(d,"sqrDist",function(){return Oi}),r.d(d,"sqrLen",function(){return Fi}),r.d(d,"forEach",function(){return Ni});var l=1e-6,M="undefined"!=typeof Float32Array?Float32Array:Array,g=Math.random;function m(t){M=t}var v=Math.PI/180;function b(t){return t*v}function p(t,n){return Math.abs(t-n)<=l*Math.max(1,Math.abs(t),Math.abs(n))}function E(){var t=new M(4);return M!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t}function x(t){var n=new M(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function w(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function T(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function y(t,n,r,e){var u=new M(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u}function _(t,n,r,e,u){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t}function R(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t}function S(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=r*i-u*e;return a?(a=1/a,t[0]=i*a,t[1]=-e*a,t[2]=-u*a,t[3]=r*a,t):null}function A(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t}function P(t){return t[0]*t[3]-t[2]*t[1]}function V(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=r[0],s=r[1],c=r[2],f=r[3];return t[0]=e*o+i*s,t[1]=u*o+a*s,t[2]=e*c+i*f,t[3]=u*c+a*f,t}function U(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s+i*o,t[1]=u*s+a*o,t[2]=e*-o+i*s,t[3]=u*-o+a*s,t}function I(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=r[0],s=r[1];return t[0]=e*o,t[1]=u*o,t[2]=i*s,t[3]=a*s,t}function L(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t}function q(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t}function O(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function F(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))}function N(t,n,r,e){return t[2]=e[2]/e[0],r[0]=e[0],r[1]=e[1],r[3]=e[3]-t[2]*r[1],[t,n,r]}function C(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function D(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function B(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function j(t,n){var r=t[0],e=t[1],u=t[2],i=t[3],a=n[0],o=n[1],s=n[2],c=n[3];return Math.abs(r-a)<=l*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-o)<=l*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(u-s)<=l*Math.max(1,Math.abs(u),Math.abs(s))&&Math.abs(i-c)<=l*Math.max(1,Math.abs(i),Math.abs(c))}function X(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function Y(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}var G=V,z=D;function W(){var t=new M(6);return M!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t}function Z(t){var n=new M(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n}function k(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t}function H(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function Q(t,n,r,e,u,i){var a=new M(6);return a[0]=t,a[1]=n,a[2]=r,a[3]=e,a[4]=u,a[5]=i,a}function K(t,n,r,e,u,i,a){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=i,t[5]=a,t}function $(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=n[4],o=n[5],s=r*i-e*u;return s?(s=1/s,t[0]=i*s,t[1]=-e*s,t[2]=-u*s,t[3]=r*s,t[4]=(u*o-i*a)*s,t[5]=(e*a-r*o)*s,t):null}function J(t){return t[0]*t[3]-t[1]*t[2]}function tt(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=r[0],f=r[1],h=r[2],d=r[3],l=r[4],M=r[5];return t[0]=e*c+i*f,t[1]=u*c+a*f,t[2]=e*h+i*d,t[3]=u*h+a*d,t[4]=e*l+i*M+o,t[5]=u*l+a*M+s,t}function nt(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=Math.sin(r),f=Math.cos(r);return t[0]=e*f+i*c,t[1]=u*f+a*c,t[2]=e*-c+i*f,t[3]=u*-c+a*f,t[4]=o,t[5]=s,t}function rt(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=r[0],f=r[1];return t[0]=e*c,t[1]=u*c,t[2]=i*f,t[3]=a*f,t[4]=o,t[5]=s,t}function et(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=r[0],f=r[1];return t[0]=e,t[1]=u,t[2]=i,t[3]=a,t[4]=e*c+i*f+o,t[5]=u*c+a*f+s,t}function ut(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t[4]=0,t[5]=0,t}function it(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t}function at(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t}function ot(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function st(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)}function ct(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t}function ft(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t}function ht(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t}function dt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t}function lt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]}function Mt(t,n){var r=t[0],e=t[1],u=t[2],i=t[3],a=t[4],o=t[5],s=n[0],c=n[1],f=n[2],h=n[3],d=n[4],M=n[5];return Math.abs(r-s)<=l*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(e-c)<=l*Math.max(1,Math.abs(e),Math.abs(c))&&Math.abs(u-f)<=l*Math.max(1,Math.abs(u),Math.abs(f))&&Math.abs(i-h)<=l*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(a-d)<=l*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(o-M)<=l*Math.max(1,Math.abs(o),Math.abs(M))}var gt=tt,mt=ft;function vt(){var t=new M(9);return M!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function bt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t}function pt(t){var n=new M(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n}function Et(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function xt(t,n,r,e,u,i,a,o,s){var c=new M(9);return c[0]=t,c[1]=n,c[2]=r,c[3]=e,c[4]=u,c[5]=i,c[6]=a,c[7]=o,c[8]=s,c}function wt(t,n,r,e,u,i,a,o,s,c){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=i,t[5]=a,t[6]=o,t[7]=s,t[8]=c,t}function Tt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function yt(t,n){if(t===n){var r=n[1],e=n[2],u=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=e,t[7]=u}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t}function _t(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=f*a-o*c,d=-f*i+o*s,l=c*i-a*s,M=r*h+e*d+u*l;return M?(M=1/M,t[0]=h*M,t[1]=(-f*e+u*c)*M,t[2]=(o*e-u*a)*M,t[3]=d*M,t[4]=(f*r-u*s)*M,t[5]=(-o*r+u*i)*M,t[6]=l*M,t[7]=(-c*r+e*s)*M,t[8]=(a*r-e*i)*M,t):null}function Rt(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=n[4],o=n[5],s=n[6],c=n[7],f=n[8];return t[0]=a*f-o*c,t[1]=u*c-e*f,t[2]=e*o-u*a,t[3]=o*s-i*f,t[4]=r*f-u*s,t[5]=u*i-r*o,t[6]=i*c-a*s,t[7]=e*s-r*c,t[8]=r*a-e*i,t}function St(t){var n=t[0],r=t[1],e=t[2],u=t[3],i=t[4],a=t[5],o=t[6],s=t[7],c=t[8];return n*(c*i-a*s)+r*(-c*u+a*o)+e*(s*u-i*o)}function At(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=r[0],l=r[1],M=r[2],g=r[3],m=r[4],v=r[5],b=r[6],p=r[7],E=r[8];return t[0]=d*e+l*a+M*c,t[1]=d*u+l*o+M*f,t[2]=d*i+l*s+M*h,t[3]=g*e+m*a+v*c,t[4]=g*u+m*o+v*f,t[5]=g*i+m*s+v*h,t[6]=b*e+p*a+E*c,t[7]=b*u+p*o+E*f,t[8]=b*i+p*s+E*h,t}function Pt(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=r[0],l=r[1];return t[0]=e,t[1]=u,t[2]=i,t[3]=a,t[4]=o,t[5]=s,t[6]=d*e+l*a+c,t[7]=d*u+l*o+f,t[8]=d*i+l*s+h,t}function Vt(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=Math.sin(r),l=Math.cos(r);return t[0]=l*e+d*a,t[1]=l*u+d*o,t[2]=l*i+d*s,t[3]=l*a-d*e,t[4]=l*o-d*u,t[5]=l*s-d*i,t[6]=c,t[7]=f,t[8]=h,t}function Ut(t,n,r){var e=r[0],u=r[1];return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=u*n[3],t[4]=u*n[4],t[5]=u*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function It(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t}function Lt(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=-r,t[4]=e,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function qt(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Ot(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t}function Ft(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=r+r,o=e+e,s=u+u,c=r*a,f=e*a,h=e*o,d=u*a,l=u*o,M=u*s,g=i*a,m=i*o,v=i*s;return t[0]=1-h-M,t[3]=f-v,t[6]=d+m,t[1]=f+v,t[4]=1-c-M,t[7]=l-g,t[2]=d-m,t[5]=l+g,t[8]=1-c-h,t}function Nt(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=n[9],d=n[10],l=n[11],M=n[12],g=n[13],m=n[14],v=n[15],b=r*o-e*a,p=r*s-u*a,E=r*c-i*a,x=e*s-u*o,w=e*c-i*o,T=u*c-i*s,y=f*g-h*M,_=f*m-d*M,R=f*v-l*M,S=h*m-d*g,A=h*v-l*g,P=d*v-l*m,V=b*P-p*A+E*S+x*R-w*_+T*y;return V?(V=1/V,t[0]=(o*P-s*A+c*S)*V,t[1]=(s*R-a*P-c*_)*V,t[2]=(a*A-o*R+c*y)*V,t[3]=(u*A-e*P-i*S)*V,t[4]=(r*P-u*R+i*_)*V,t[5]=(e*R-r*A-i*y)*V,t[6]=(g*T-m*w+v*x)*V,t[7]=(m*E-M*T-v*p)*V,t[8]=(M*w-g*E+v*b)*V,t):null}function Ct(t,n,r){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function Dt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function Bt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))}function jt(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t}function Xt(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t}function Yt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t}function Gt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t}function zt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]}function Wt(t,n){var r=t[0],e=t[1],u=t[2],i=t[3],a=t[4],o=t[5],s=t[6],c=t[7],f=t[8],h=n[0],d=n[1],M=n[2],g=n[3],m=n[4],v=n[5],b=n[6],p=n[7],E=n[8];return Math.abs(r-h)<=l*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(e-d)<=l*Math.max(1,Math.abs(e),Math.abs(d))&&Math.abs(u-M)<=l*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(i-g)<=l*Math.max(1,Math.abs(i),Math.abs(g))&&Math.abs(a-m)<=l*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(o-v)<=l*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(s-b)<=l*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(c-p)<=l*Math.max(1,Math.abs(c),Math.abs(p))&&Math.abs(f-E)<=l*Math.max(1,Math.abs(f),Math.abs(E))}var Zt=At,kt=Xt;function Ht(){var t=new M(16);return M!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function Qt(t){var n=new M(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function Kt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function $t(t,n,r,e,u,i,a,o,s,c,f,h,d,l,g,m){var v=new M(16);return v[0]=t,v[1]=n,v[2]=r,v[3]=e,v[4]=u,v[5]=i,v[6]=a,v[7]=o,v[8]=s,v[9]=c,v[10]=f,v[11]=h,v[12]=d,v[13]=l,v[14]=g,v[15]=m,v}function Jt(t,n,r,e,u,i,a,o,s,c,f,h,d,l,M,g,m){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=i,t[5]=a,t[6]=o,t[7]=s,t[8]=c,t[9]=f,t[10]=h,t[11]=d,t[12]=l,t[13]=M,t[14]=g,t[15]=m,t}function tn(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function nn(t,n){if(t===n){var r=n[1],e=n[2],u=n[3],i=n[6],a=n[7],o=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=i,t[11]=n[14],t[12]=u,t[13]=a,t[14]=o}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function rn(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=n[9],d=n[10],l=n[11],M=n[12],g=n[13],m=n[14],v=n[15],b=r*o-e*a,p=r*s-u*a,E=r*c-i*a,x=e*s-u*o,w=e*c-i*o,T=u*c-i*s,y=f*g-h*M,_=f*m-d*M,R=f*v-l*M,S=h*m-d*g,A=h*v-l*g,P=d*v-l*m,V=b*P-p*A+E*S+x*R-w*_+T*y;return V?(V=1/V,t[0]=(o*P-s*A+c*S)*V,t[1]=(u*A-e*P-i*S)*V,t[2]=(g*T-m*w+v*x)*V,t[3]=(d*w-h*T-l*x)*V,t[4]=(s*R-a*P-c*_)*V,t[5]=(r*P-u*R+i*_)*V,t[6]=(m*E-M*T-v*p)*V,t[7]=(f*T-d*E+l*p)*V,t[8]=(a*A-o*R+c*y)*V,t[9]=(e*R-r*A-i*y)*V,t[10]=(M*w-g*E+v*b)*V,t[11]=(h*E-f*w-l*b)*V,t[12]=(o*_-a*S-s*y)*V,t[13]=(r*S-e*_+u*y)*V,t[14]=(g*p-M*x-m*b)*V,t[15]=(f*x-h*p+d*b)*V,t):null}function en(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=n[4],o=n[5],s=n[6],c=n[7],f=n[8],h=n[9],d=n[10],l=n[11],M=n[12],g=n[13],m=n[14],v=n[15];return t[0]=o*(d*v-l*m)-h*(s*v-c*m)+g*(s*l-c*d),t[1]=-(e*(d*v-l*m)-h*(u*v-i*m)+g*(u*l-i*d)),t[2]=e*(s*v-c*m)-o*(u*v-i*m)+g*(u*c-i*s),t[3]=-(e*(s*l-c*d)-o*(u*l-i*d)+h*(u*c-i*s)),t[4]=-(a*(d*v-l*m)-f*(s*v-c*m)+M*(s*l-c*d)),t[5]=r*(d*v-l*m)-f*(u*v-i*m)+M*(u*l-i*d),t[6]=-(r*(s*v-c*m)-a*(u*v-i*m)+M*(u*c-i*s)),t[7]=r*(s*l-c*d)-a*(u*l-i*d)+f*(u*c-i*s),t[8]=a*(h*v-l*g)-f*(o*v-c*g)+M*(o*l-c*h),t[9]=-(r*(h*v-l*g)-f*(e*v-i*g)+M*(e*l-i*h)),t[10]=r*(o*v-c*g)-a*(e*v-i*g)+M*(e*c-i*o),t[11]=-(r*(o*l-c*h)-a*(e*l-i*h)+f*(e*c-i*o)),t[12]=-(a*(h*m-d*g)-f*(o*m-s*g)+M*(o*d-s*h)),t[13]=r*(h*m-d*g)-f*(e*m-u*g)+M*(e*d-u*h),t[14]=-(r*(o*m-s*g)-a*(e*m-u*g)+M*(e*s-u*o)),t[15]=r*(o*d-s*h)-a*(e*d-u*h)+f*(e*s-u*o),t}function un(t){var n=t[0],r=t[1],e=t[2],u=t[3],i=t[4],a=t[5],o=t[6],s=t[7],c=t[8],f=t[9],h=t[10],d=t[11],l=t[12],M=t[13],g=t[14],m=t[15];return(n*a-r*i)*(h*m-d*g)-(n*o-e*i)*(f*m-d*M)+(n*s-u*i)*(f*g-h*M)+(r*o-e*a)*(c*m-d*l)-(r*s-u*a)*(c*g-h*l)+(e*s-u*o)*(c*M-f*l)}function an(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=n[8],d=n[9],l=n[10],M=n[11],g=n[12],m=n[13],v=n[14],b=n[15],p=r[0],E=r[1],x=r[2],w=r[3];return t[0]=p*e+E*o+x*h+w*g,t[1]=p*u+E*s+x*d+w*m,t[2]=p*i+E*c+x*l+w*v,t[3]=p*a+E*f+x*M+w*b,p=r[4],E=r[5],x=r[6],w=r[7],t[4]=p*e+E*o+x*h+w*g,t[5]=p*u+E*s+x*d+w*m,t[6]=p*i+E*c+x*l+w*v,t[7]=p*a+E*f+x*M+w*b,p=r[8],E=r[9],x=r[10],w=r[11],t[8]=p*e+E*o+x*h+w*g,t[9]=p*u+E*s+x*d+w*m,t[10]=p*i+E*c+x*l+w*v,t[11]=p*a+E*f+x*M+w*b,p=r[12],E=r[13],x=r[14],w=r[15],t[12]=p*e+E*o+x*h+w*g,t[13]=p*u+E*s+x*d+w*m,t[14]=p*i+E*c+x*l+w*v,t[15]=p*a+E*f+x*M+w*b,t}function on(t,n,r){var e=r[0],u=r[1],i=r[2],a=void 0,o=void 0,s=void 0,c=void 0,f=void 0,h=void 0,d=void 0,l=void 0,M=void 0,g=void 0,m=void 0,v=void 0;return n===t?(t[12]=n[0]*e+n[4]*u+n[8]*i+n[12],t[13]=n[1]*e+n[5]*u+n[9]*i+n[13],t[14]=n[2]*e+n[6]*u+n[10]*i+n[14],t[15]=n[3]*e+n[7]*u+n[11]*i+n[15]):(a=n[0],o=n[1],s=n[2],c=n[3],f=n[4],h=n[5],d=n[6],l=n[7],M=n[8],g=n[9],m=n[10],v=n[11],t[0]=a,t[1]=o,t[2]=s,t[3]=c,t[4]=f,t[5]=h,t[6]=d,t[7]=l,t[8]=M,t[9]=g,t[10]=m,t[11]=v,t[12]=a*e+f*u+M*i+n[12],t[13]=o*e+h*u+g*i+n[13],t[14]=s*e+d*u+m*i+n[14],t[15]=c*e+l*u+v*i+n[15]),t}function sn(t,n,r){var e=r[0],u=r[1],i=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*u,t[5]=n[5]*u,t[6]=n[6]*u,t[7]=n[7]*u,t[8]=n[8]*i,t[9]=n[9]*i,t[10]=n[10]*i,t[11]=n[11]*i,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function cn(t,n,r,e){var u,i,a,o,s,c,f,h,d,M,g,m,v,b,p,E,x,w,T,y,_,R,S,A,P=e[0],V=e[1],U=e[2],I=Math.sqrt(P*P+V*V+U*U);return I<l?null:(P*=I=1/I,V*=I,U*=I,u=Math.sin(r),a=1-(i=Math.cos(r)),o=n[0],s=n[1],c=n[2],f=n[3],h=n[4],d=n[5],M=n[6],g=n[7],m=n[8],v=n[9],b=n[10],p=n[11],E=P*P*a+i,x=V*P*a+U*u,w=U*P*a-V*u,T=P*V*a-U*u,y=V*V*a+i,_=U*V*a+P*u,R=P*U*a+V*u,S=V*U*a-P*u,A=U*U*a+i,t[0]=o*E+h*x+m*w,t[1]=s*E+d*x+v*w,t[2]=c*E+M*x+b*w,t[3]=f*E+g*x+p*w,t[4]=o*T+h*y+m*_,t[5]=s*T+d*y+v*_,t[6]=c*T+M*y+b*_,t[7]=f*T+g*y+p*_,t[8]=o*R+h*S+m*A,t[9]=s*R+d*S+v*A,t[10]=c*R+M*S+b*A,t[11]=f*R+g*S+p*A,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function fn(t,n,r){var e=Math.sin(r),u=Math.cos(r),i=n[4],a=n[5],o=n[6],s=n[7],c=n[8],f=n[9],h=n[10],d=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=i*u+c*e,t[5]=a*u+f*e,t[6]=o*u+h*e,t[7]=s*u+d*e,t[8]=c*u-i*e,t[9]=f*u-a*e,t[10]=h*u-o*e,t[11]=d*u-s*e,t}function hn(t,n,r){var e=Math.sin(r),u=Math.cos(r),i=n[0],a=n[1],o=n[2],s=n[3],c=n[8],f=n[9],h=n[10],d=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=i*u-c*e,t[1]=a*u-f*e,t[2]=o*u-h*e,t[3]=s*u-d*e,t[8]=i*e+c*u,t[9]=a*e+f*u,t[10]=o*e+h*u,t[11]=s*e+d*u,t}function dn(t,n,r){var e=Math.sin(r),u=Math.cos(r),i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],f=n[5],h=n[6],d=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=i*u+c*e,t[1]=a*u+f*e,t[2]=o*u+h*e,t[3]=s*u+d*e,t[4]=c*u-i*e,t[5]=f*u-a*e,t[6]=h*u-o*e,t[7]=d*u-s*e,t}function ln(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Mn(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function gn(t,n,r){var e,u,i,a=r[0],o=r[1],s=r[2],c=Math.sqrt(a*a+o*o+s*s);return c<l?null:(a*=c=1/c,o*=c,s*=c,e=Math.sin(n),i=1-(u=Math.cos(n)),t[0]=a*a*i+u,t[1]=o*a*i+s*e,t[2]=s*a*i-o*e,t[3]=0,t[4]=a*o*i-s*e,t[5]=o*o*i+u,t[6]=s*o*i+a*e,t[7]=0,t[8]=a*s*i+o*e,t[9]=o*s*i-a*e,t[10]=s*s*i+u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function mn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function vn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function bn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function pn(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=e+e,s=u+u,c=i+i,f=e*o,h=e*s,d=e*c,l=u*s,M=u*c,g=i*c,m=a*o,v=a*s,b=a*c;return t[0]=1-(l+g),t[1]=h+b,t[2]=d-v,t[3]=0,t[4]=h-b,t[5]=1-(f+g),t[6]=M+m,t[7]=0,t[8]=d+v,t[9]=M-m,t[10]=1-(f+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function En(t,n){var r=new M(3),e=-n[0],u=-n[1],i=-n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=e*e+u*u+i*i+a*a;return h>0?(r[0]=2*(o*a+f*e+s*i-c*u)/h,r[1]=2*(s*a+f*u+c*e-o*i)/h,r[2]=2*(c*a+f*i+o*u-s*e)/h):(r[0]=2*(o*a+f*e+s*i-c*u),r[1]=2*(s*a+f*u+c*e-o*i),r[2]=2*(c*a+f*i+o*u-s*e)),pn(t,n,r),t}function xn(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function wn(t,n){var r=n[0],e=n[1],u=n[2],i=n[4],a=n[5],o=n[6],s=n[8],c=n[9],f=n[10];return t[0]=Math.sqrt(r*r+e*e+u*u),t[1]=Math.sqrt(i*i+a*a+o*o),t[2]=Math.sqrt(s*s+c*c+f*f),t}function Tn(t,n){var r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function yn(t,n,r,e){var u=n[0],i=n[1],a=n[2],o=n[3],s=u+u,c=i+i,f=a+a,h=u*s,d=u*c,l=u*f,M=i*c,g=i*f,m=a*f,v=o*s,b=o*c,p=o*f,E=e[0],x=e[1],w=e[2];return t[0]=(1-(M+m))*E,t[1]=(d+p)*E,t[2]=(l-b)*E,t[3]=0,t[4]=(d-p)*x,t[5]=(1-(h+m))*x,t[6]=(g+v)*x,t[7]=0,t[8]=(l+b)*w,t[9]=(g-v)*w,t[10]=(1-(h+M))*w,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function _n(t,n,r,e,u){var i=n[0],a=n[1],o=n[2],s=n[3],c=i+i,f=a+a,h=o+o,d=i*c,l=i*f,M=i*h,g=a*f,m=a*h,v=o*h,b=s*c,p=s*f,E=s*h,x=e[0],w=e[1],T=e[2],y=u[0],_=u[1],R=u[2],S=(1-(g+v))*x,A=(l+E)*x,P=(M-p)*x,V=(l-E)*w,U=(1-(d+v))*w,I=(m+b)*w,L=(M+p)*T,q=(m-b)*T,O=(1-(d+g))*T;return t[0]=S,t[1]=A,t[2]=P,t[3]=0,t[4]=V,t[5]=U,t[6]=I,t[7]=0,t[8]=L,t[9]=q,t[10]=O,t[11]=0,t[12]=r[0]+y-(S*y+V*_+L*R),t[13]=r[1]+_-(A*y+U*_+q*R),t[14]=r[2]+R-(P*y+I*_+O*R),t[15]=1,t}function Rn(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=r+r,o=e+e,s=u+u,c=r*a,f=e*a,h=e*o,d=u*a,l=u*o,M=u*s,g=i*a,m=i*o,v=i*s;return t[0]=1-h-M,t[1]=f+v,t[2]=d-m,t[3]=0,t[4]=f-v,t[5]=1-c-M,t[6]=l+g,t[7]=0,t[8]=d+m,t[9]=l-g,t[10]=1-c-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Sn(t,n,r,e,u,i,a){var o=1/(r-n),s=1/(u-e),c=1/(i-a);return t[0]=2*i*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*i*s,t[6]=0,t[7]=0,t[8]=(r+n)*o,t[9]=(u+e)*s,t[10]=(a+i)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*i*2*c,t[15]=0,t}function An(t,n,r,e,u){var i=1/Math.tan(n/2),a=void 0;return t[0]=i/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=u&&u!==1/0?(a=1/(e-u),t[10]=(u+e)*a,t[14]=2*u*e*a):(t[10]=-1,t[14]=-2*e),t}function Pn(t,n,r,e){var u=Math.tan(n.upDegrees*Math.PI/180),i=Math.tan(n.downDegrees*Math.PI/180),a=Math.tan(n.leftDegrees*Math.PI/180),o=Math.tan(n.rightDegrees*Math.PI/180),s=2/(a+o),c=2/(u+i);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(a-o)*s*.5,t[9]=(u-i)*c*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function Vn(t,n,r,e,u,i,a){var o=1/(n-r),s=1/(e-u),c=1/(i-a);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(n+r)*o,t[13]=(u+e)*s,t[14]=(a+i)*c,t[15]=1,t}function Un(t,n,r,e){var u=void 0,i=void 0,a=void 0,o=void 0,s=void 0,c=void 0,f=void 0,h=void 0,d=void 0,M=void 0,g=n[0],m=n[1],v=n[2],b=e[0],p=e[1],E=e[2],x=r[0],w=r[1],T=r[2];return Math.abs(g-x)<l&&Math.abs(m-w)<l&&Math.abs(v-T)<l?tn(t):(f=g-x,h=m-w,d=v-T,u=p*(d*=M=1/Math.sqrt(f*f+h*h+d*d))-E*(h*=M),i=E*(f*=M)-b*d,a=b*h-p*f,(M=Math.sqrt(u*u+i*i+a*a))?(u*=M=1/M,i*=M,a*=M):(u=0,i=0,a=0),o=h*a-d*i,s=d*u-f*a,c=f*i-h*u,(M=Math.sqrt(o*o+s*s+c*c))?(o*=M=1/M,s*=M,c*=M):(o=0,s=0,c=0),t[0]=u,t[1]=o,t[2]=f,t[3]=0,t[4]=i,t[5]=s,t[6]=h,t[7]=0,t[8]=a,t[9]=c,t[10]=d,t[11]=0,t[12]=-(u*g+i*m+a*v),t[13]=-(o*g+s*m+c*v),t[14]=-(f*g+h*m+d*v),t[15]=1,t)}function In(t,n,r,e){var u=n[0],i=n[1],a=n[2],o=e[0],s=e[1],c=e[2],f=u-r[0],h=i-r[1],d=a-r[2],l=f*f+h*h+d*d;l>0&&(f*=l=1/Math.sqrt(l),h*=l,d*=l);var M=s*d-c*h,g=c*f-o*d,m=o*h-s*f;return(l=M*M+g*g+m*m)>0&&(M*=l=1/Math.sqrt(l),g*=l,m*=l),t[0]=M,t[1]=g,t[2]=m,t[3]=0,t[4]=h*m-d*g,t[5]=d*M-f*m,t[6]=f*g-h*M,t[7]=0,t[8]=f,t[9]=h,t[10]=d,t[11]=0,t[12]=u,t[13]=i,t[14]=a,t[15]=1,t}function Ln(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function qn(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function On(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function Fn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function Nn(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function Cn(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function Dn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function Bn(t,n){var r=t[0],e=t[1],u=t[2],i=t[3],a=t[4],o=t[5],s=t[6],c=t[7],f=t[8],h=t[9],d=t[10],M=t[11],g=t[12],m=t[13],v=t[14],b=t[15],p=n[0],E=n[1],x=n[2],w=n[3],T=n[4],y=n[5],_=n[6],R=n[7],S=n[8],A=n[9],P=n[10],V=n[11],U=n[12],I=n[13],L=n[14],q=n[15];return Math.abs(r-p)<=l*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(e-E)<=l*Math.max(1,Math.abs(e),Math.abs(E))&&Math.abs(u-x)<=l*Math.max(1,Math.abs(u),Math.abs(x))&&Math.abs(i-w)<=l*Math.max(1,Math.abs(i),Math.abs(w))&&Math.abs(a-T)<=l*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(o-y)<=l*Math.max(1,Math.abs(o),Math.abs(y))&&Math.abs(s-_)<=l*Math.max(1,Math.abs(s),Math.abs(_))&&Math.abs(c-R)<=l*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(f-S)<=l*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(h-A)<=l*Math.max(1,Math.abs(h),Math.abs(A))&&Math.abs(d-P)<=l*Math.max(1,Math.abs(d),Math.abs(P))&&Math.abs(M-V)<=l*Math.max(1,Math.abs(M),Math.abs(V))&&Math.abs(g-U)<=l*Math.max(1,Math.abs(g),Math.abs(U))&&Math.abs(m-I)<=l*Math.max(1,Math.abs(m),Math.abs(I))&&Math.abs(v-L)<=l*Math.max(1,Math.abs(v),Math.abs(L))&&Math.abs(b-q)<=l*Math.max(1,Math.abs(b),Math.abs(q))}var jn=an,Xn=Fn;function Yn(){var t=new M(3);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Gn(t){var n=new M(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function zn(t){var n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function Wn(t,n,r){var e=new M(3);return e[0]=t,e[1]=n,e[2]=r,e}function Zn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function kn(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function Hn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function Qn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function Kn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function $n(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function Jn(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function tr(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function nr(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function rr(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function er(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function ur(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function ir(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function ar(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2];return Math.sqrt(r*r+e*e+u*u)}function or(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2];return r*r+e*e+u*u}function sr(t){var n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function cr(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function fr(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function hr(t,n){var r=n[0],e=n[1],u=n[2],i=r*r+e*e+u*u;return i>0&&(i=1/Math.sqrt(i),t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i),t}function dr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function lr(t,n,r){var e=n[0],u=n[1],i=n[2],a=r[0],o=r[1],s=r[2];return t[0]=u*s-i*o,t[1]=i*a-e*s,t[2]=e*o-u*a,t}function Mr(t,n,r,e){var u=n[0],i=n[1],a=n[2];return t[0]=u+e*(r[0]-u),t[1]=i+e*(r[1]-i),t[2]=a+e*(r[2]-a),t}function gr(t,n,r,e,u,i){var a=i*i,o=a*(2*i-3)+1,s=a*(i-2)+i,c=a*(i-1),f=a*(3-2*i);return t[0]=n[0]*o+r[0]*s+e[0]*c+u[0]*f,t[1]=n[1]*o+r[1]*s+e[1]*c+u[1]*f,t[2]=n[2]*o+r[2]*s+e[2]*c+u[2]*f,t}function mr(t,n,r,e,u,i){var a=1-i,o=a*a,s=i*i,c=o*a,f=3*i*o,h=3*s*a,d=s*i;return t[0]=n[0]*c+r[0]*f+e[0]*h+u[0]*d,t[1]=n[1]*c+r[1]*f+e[1]*h+u[1]*d,t[2]=n[2]*c+r[2]*f+e[2]*h+u[2]*d,t}function vr(t,n){n=n||1;var r=2*g()*Math.PI,e=2*g()-1,u=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*u,t[1]=Math.sin(r)*u,t[2]=e*n,t}function br(t,n,r){var e=n[0],u=n[1],i=n[2],a=r[3]*e+r[7]*u+r[11]*i+r[15];return a=a||1,t[0]=(r[0]*e+r[4]*u+r[8]*i+r[12])/a,t[1]=(r[1]*e+r[5]*u+r[9]*i+r[13])/a,t[2]=(r[2]*e+r[6]*u+r[10]*i+r[14])/a,t}function pr(t,n,r){var e=n[0],u=n[1],i=n[2];return t[0]=e*r[0]+u*r[3]+i*r[6],t[1]=e*r[1]+u*r[4]+i*r[7],t[2]=e*r[2]+u*r[5]+i*r[8],t}function Er(t,n,r){var e=r[0],u=r[1],i=r[2],a=r[3],o=n[0],s=n[1],c=n[2],f=u*c-i*s,h=i*o-e*c,d=e*s-u*o,l=u*d-i*h,M=i*f-e*d,g=e*h-u*f,m=2*a;return f*=m,h*=m,d*=m,l*=2,M*=2,g*=2,t[0]=o+f+l,t[1]=s+h+M,t[2]=c+d+g,t}function xr(t,n,r,e){var u=[],i=[];return u[0]=n[0]-r[0],u[1]=n[1]-r[1],u[2]=n[2]-r[2],i[0]=u[0],i[1]=u[1]*Math.cos(e)-u[2]*Math.sin(e),i[2]=u[1]*Math.sin(e)+u[2]*Math.cos(e),t[0]=i[0]+r[0],t[1]=i[1]+r[1],t[2]=i[2]+r[2],t}function wr(t,n,r,e){var u=[],i=[];return u[0]=n[0]-r[0],u[1]=n[1]-r[1],u[2]=n[2]-r[2],i[0]=u[2]*Math.sin(e)+u[0]*Math.cos(e),i[1]=u[1],i[2]=u[2]*Math.cos(e)-u[0]*Math.sin(e),t[0]=i[0]+r[0],t[1]=i[1]+r[1],t[2]=i[2]+r[2],t}function Tr(t,n,r,e){var u=[],i=[];return u[0]=n[0]-r[0],u[1]=n[1]-r[1],u[2]=n[2]-r[2],i[0]=u[0]*Math.cos(e)-u[1]*Math.sin(e),i[1]=u[0]*Math.sin(e)+u[1]*Math.cos(e),i[2]=u[2],t[0]=i[0]+r[0],t[1]=i[1]+r[1],t[2]=i[2]+r[2],t}function yr(t,n){var r=Wn(t[0],t[1],t[2]),e=Wn(n[0],n[1],n[2]);hr(r,r),hr(e,e);var u=dr(r,e);return u>1?0:u<-1?Math.PI:Math.acos(u)}function _r(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Rr(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Sr(t,n){var r=t[0],e=t[1],u=t[2],i=n[0],a=n[1],o=n[2];return Math.abs(r-i)<=l*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-a)<=l*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(u-o)<=l*Math.max(1,Math.abs(u),Math.abs(o))}var Ar,Pr=Qn,Vr=Kn,Ur=$n,Ir=ar,Lr=or,qr=zn,Or=sr,Fr=(Ar=Yn(),function(t,n,r,e,u,i){var a=void 0,o=void 0;for(n||(n=3),r||(r=0),o=e?Math.min(e*n+r,t.length):t.length,a=r;a<o;a+=n)Ar[0]=t[a],Ar[1]=t[a+1],Ar[2]=t[a+2],u(Ar,Ar,i),t[a]=Ar[0],t[a+1]=Ar[1],t[a+2]=Ar[2];return t});function Nr(){var t=new M(4);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function Cr(t){var n=new M(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function Dr(t,n,r,e){var u=new M(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u}function Br(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function jr(t,n,r,e,u){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t}function Xr(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function Yr(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function Gr(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function zr(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function Wr(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function Zr(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function kr(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t}function Hr(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t}function Qr(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function Kr(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function $r(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}function Jr(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2],i=n[3]-t[3];return Math.sqrt(r*r+e*e+u*u+i*i)}function te(t,n){var r=n[0]-t[0],e=n[1]-t[1],u=n[2]-t[2],i=n[3]-t[3];return r*r+e*e+u*u+i*i}function ne(t){var n=t[0],r=t[1],e=t[2],u=t[3];return Math.sqrt(n*n+r*r+e*e+u*u)}function re(t){var n=t[0],r=t[1],e=t[2],u=t[3];return n*n+r*r+e*e+u*u}function ee(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function ue(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function ie(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=r*r+e*e+u*u+i*i;return a>0&&(a=1/Math.sqrt(a),t[0]=r*a,t[1]=e*a,t[2]=u*a,t[3]=i*a),t}function ae(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function oe(t,n,r,e){var u=n[0],i=n[1],a=n[2],o=n[3];return t[0]=u+e*(r[0]-u),t[1]=i+e*(r[1]-i),t[2]=a+e*(r[2]-a),t[3]=o+e*(r[3]-o),t}function se(t,n){var r,e,u,i,a,o;n=n||1;do{a=(r=2*g()-1)*r+(e=2*g()-1)*e}while(a>=1);do{o=(u=2*g()-1)*u+(i=2*g()-1)*i}while(o>=1);var s=Math.sqrt((1-a)/o);return t[0]=n*r,t[1]=n*e,t[2]=n*u*s,t[3]=n*i*s,t}function ce(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3];return t[0]=r[0]*e+r[4]*u+r[8]*i+r[12]*a,t[1]=r[1]*e+r[5]*u+r[9]*i+r[13]*a,t[2]=r[2]*e+r[6]*u+r[10]*i+r[14]*a,t[3]=r[3]*e+r[7]*u+r[11]*i+r[15]*a,t}function fe(t,n,r){var e=n[0],u=n[1],i=n[2],a=r[0],o=r[1],s=r[2],c=r[3],f=c*e+o*i-s*u,h=c*u+s*e-a*i,d=c*i+a*u-o*e,l=-a*e-o*u-s*i;return t[0]=f*c+l*-a+h*-s-d*-o,t[1]=h*c+l*-o+d*-a-f*-s,t[2]=d*c+l*-s+f*-o-h*-a,t[3]=n[3],t}function he(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function de(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function le(t,n){var r=t[0],e=t[1],u=t[2],i=t[3],a=n[0],o=n[1],s=n[2],c=n[3];return Math.abs(r-a)<=l*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-o)<=l*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(u-s)<=l*Math.max(1,Math.abs(u),Math.abs(s))&&Math.abs(i-c)<=l*Math.max(1,Math.abs(i),Math.abs(c))}var Me=Yr,ge=Gr,me=zr,ve=Jr,be=te,pe=ne,Ee=re,xe=function(){var t=Nr();return function(n,r,e,u,i,a){var o=void 0,s=void 0;for(r||(r=4),e||(e=0),s=u?Math.min(u*r+e,n.length):n.length,o=e;o<s;o+=r)t[0]=n[o],t[1]=n[o+1],t[2]=n[o+2],t[3]=n[o+3],i(t,t,a),n[o]=t[0],n[o+1]=t[1],n[o+2]=t[2],n[o+3]=t[3];return n}}();function we(){var t=new M(4);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Te(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function ye(t,n,r){r*=.5;var e=Math.sin(r);return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=Math.cos(r),t}function _e(t,n){var r=2*Math.acos(n[3]),e=Math.sin(r/2);return e>l?(t[0]=n[0]/e,t[1]=n[1]/e,t[2]=n[2]/e):(t[0]=1,t[1]=0,t[2]=0),r}function Re(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=r[0],s=r[1],c=r[2],f=r[3];return t[0]=e*f+a*o+u*c-i*s,t[1]=u*f+a*s+i*o-e*c,t[2]=i*f+a*c+e*s-u*o,t[3]=a*f-e*o-u*s-i*c,t}function Se(t,n,r){r*=.5;var e=n[0],u=n[1],i=n[2],a=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s+a*o,t[1]=u*s+i*o,t[2]=i*s-u*o,t[3]=a*s-e*o,t}function Ae(t,n,r){r*=.5;var e=n[0],u=n[1],i=n[2],a=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s-i*o,t[1]=u*s+a*o,t[2]=i*s+e*o,t[3]=a*s-u*o,t}function Pe(t,n,r){r*=.5;var e=n[0],u=n[1],i=n[2],a=n[3],o=Math.sin(r),s=Math.cos(r);return t[0]=e*s+u*o,t[1]=u*s-e*o,t[2]=i*s+a*o,t[3]=a*s-i*o,t}function Ve(t,n){var r=n[0],e=n[1],u=n[2];return t[0]=r,t[1]=e,t[2]=u,t[3]=Math.sqrt(Math.abs(1-r*r-e*e-u*u)),t}function Ue(t,n,r,e){var u=n[0],i=n[1],a=n[2],o=n[3],s=r[0],c=r[1],f=r[2],h=r[3],d=void 0,M=void 0,g=void 0,m=void 0,v=void 0;return(M=u*s+i*c+a*f+o*h)<0&&(M=-M,s=-s,c=-c,f=-f,h=-h),1-M>l?(d=Math.acos(M),g=Math.sin(d),m=Math.sin((1-e)*d)/g,v=Math.sin(e*d)/g):(m=1-e,v=e),t[0]=m*u+v*s,t[1]=m*i+v*c,t[2]=m*a+v*f,t[3]=m*o+v*h,t}function Ie(t){var n=g(),r=g(),e=g(),u=Math.sqrt(1-n),i=Math.sqrt(n);return t[0]=u*Math.sin(2*Math.PI*r),t[1]=u*Math.cos(2*Math.PI*r),t[2]=i*Math.sin(2*Math.PI*e),t[3]=i*Math.cos(2*Math.PI*e),t}function Le(t,n){var r=n[0],e=n[1],u=n[2],i=n[3],a=r*r+e*e+u*u+i*i,o=a?1/a:0;return t[0]=-r*o,t[1]=-e*o,t[2]=-u*o,t[3]=i*o,t}function qe(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function Oe(t,n){var r=n[0]+n[4]+n[8],e=void 0;if(r>0)e=Math.sqrt(r+1),t[3]=.5*e,e=.5/e,t[0]=(n[5]-n[7])*e,t[1]=(n[6]-n[2])*e,t[2]=(n[1]-n[3])*e;else{var u=0;n[4]>n[0]&&(u=1),n[8]>n[3*u+u]&&(u=2);var i=(u+1)%3,a=(u+2)%3;e=Math.sqrt(n[3*u+u]-n[3*i+i]-n[3*a+a]+1),t[u]=.5*e,e=.5/e,t[3]=(n[3*i+a]-n[3*a+i])*e,t[i]=(n[3*i+u]+n[3*u+i])*e,t[a]=(n[3*a+u]+n[3*u+a])*e}return t}function Fe(t,n,r,e){var u=.5*Math.PI/180;n*=u,r*=u,e*=u;var i=Math.sin(n),a=Math.cos(n),o=Math.sin(r),s=Math.cos(r),c=Math.sin(e),f=Math.cos(e);return t[0]=i*s*f-a*o*c,t[1]=a*o*f+i*s*c,t[2]=a*s*c-i*o*f,t[3]=a*s*f+i*o*c,t}function Ne(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var Ce,De,Be,je,Xe,Ye,Ge=Cr,ze=Dr,We=Br,Ze=jr,ke=Xr,He=Re,Qe=Kr,Ke=ae,$e=oe,Je=ne,tu=Je,nu=re,ru=nu,eu=ie,uu=de,iu=le,au=(Ce=Yn(),De=Wn(1,0,0),Be=Wn(0,1,0),function(t,n,r){var e=dr(n,r);return e<-.999999?(lr(Ce,De,n),qr(Ce)<1e-6&&lr(Ce,Be,n),hr(Ce,Ce),ye(t,Ce,Math.PI),t):e>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(lr(Ce,n,r),t[0]=Ce[0],t[1]=Ce[1],t[2]=Ce[2],t[3]=1+e,eu(t,t))}),ou=(je=we(),Xe=we(),function(t,n,r,e,u,i){return Ue(je,n,u,i),Ue(Xe,r,e,i),Ue(t,je,Xe,2*i*(1-i)),t}),su=(Ye=vt(),function(t,n,r,e){return Ye[0]=r[0],Ye[3]=r[1],Ye[6]=r[2],Ye[1]=e[0],Ye[4]=e[1],Ye[7]=e[2],Ye[2]=-n[0],Ye[5]=-n[1],Ye[8]=-n[2],eu(t,Oe(t,Ye))});function cu(){var t=new M(8);return M!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t}function fu(t){var n=new M(8);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n}function hu(t,n,r,e,u,i,a,o){var s=new M(8);return s[0]=t,s[1]=n,s[2]=r,s[3]=e,s[4]=u,s[5]=i,s[6]=a,s[7]=o,s}function du(t,n,r,e,u,i,a){var o=new M(8);o[0]=t,o[1]=n,o[2]=r,o[3]=e;var s=.5*u,c=.5*i,f=.5*a;return o[4]=s*e+c*r-f*n,o[5]=c*e+f*t-s*r,o[6]=f*e+s*n-c*t,o[7]=-s*t-c*n-f*r,o}function lu(t,n,r){var e=.5*r[0],u=.5*r[1],i=.5*r[2],a=n[0],o=n[1],s=n[2],c=n[3];return t[0]=a,t[1]=o,t[2]=s,t[3]=c,t[4]=e*c+u*s-i*o,t[5]=u*c+i*a-e*s,t[6]=i*c+e*o-u*a,t[7]=-e*a-u*o-i*s,t}function Mu(t,n){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*n[0],t[5]=.5*n[1],t[6]=.5*n[2],t[7]=0,t}function gu(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function mu(t,n){var r=we();Tn(r,n);var e=new M(3);return xn(e,n),lu(t,r,e),t}function vu(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}function bu(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function pu(t,n,r,e,u,i,a,o,s){return t[0]=n,t[1]=r,t[2]=e,t[3]=u,t[4]=i,t[5]=a,t[6]=o,t[7]=s,t}var Eu=We;function xu(t,n){return t[0]=n[4],t[1]=n[5],t[2]=n[6],t[3]=n[7],t}var wu=We;function Tu(t,n){return t[4]=n[0],t[5]=n[1],t[6]=n[2],t[7]=n[3],t}function yu(t,n){var r=n[4],e=n[5],u=n[6],i=n[7],a=-n[0],o=-n[1],s=-n[2],c=n[3];return t[0]=2*(r*c+i*a+e*s-u*o),t[1]=2*(e*c+i*o+u*a-r*s),t[2]=2*(u*c+i*s+r*o-e*a),t}function _u(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=.5*r[0],s=.5*r[1],c=.5*r[2],f=n[4],h=n[5],d=n[6],l=n[7];return t[0]=e,t[1]=u,t[2]=i,t[3]=a,t[4]=a*o+u*c-i*s+f,t[5]=a*s+i*o-e*c+h,t[6]=a*c+e*s-u*o+d,t[7]=-e*o-u*s-i*c+l,t}function Ru(t,n,r){var e=-n[0],u=-n[1],i=-n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=o*a+f*e+s*i-c*u,d=s*a+f*u+c*e-o*i,l=c*a+f*i+o*u-s*e,M=f*a-o*e-s*u-c*i;return Se(t,n,r),e=t[0],u=t[1],i=t[2],a=t[3],t[4]=h*a+M*e+d*i-l*u,t[5]=d*a+M*u+l*e-h*i,t[6]=l*a+M*i+h*u-d*e,t[7]=M*a-h*e-d*u-l*i,t}function Su(t,n,r){var e=-n[0],u=-n[1],i=-n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=o*a+f*e+s*i-c*u,d=s*a+f*u+c*e-o*i,l=c*a+f*i+o*u-s*e,M=f*a-o*e-s*u-c*i;return Ae(t,n,r),e=t[0],u=t[1],i=t[2],a=t[3],t[4]=h*a+M*e+d*i-l*u,t[5]=d*a+M*u+l*e-h*i,t[6]=l*a+M*i+h*u-d*e,t[7]=M*a-h*e-d*u-l*i,t}function Au(t,n,r){var e=-n[0],u=-n[1],i=-n[2],a=n[3],o=n[4],s=n[5],c=n[6],f=n[7],h=o*a+f*e+s*i-c*u,d=s*a+f*u+c*e-o*i,l=c*a+f*i+o*u-s*e,M=f*a-o*e-s*u-c*i;return Pe(t,n,r),e=t[0],u=t[1],i=t[2],a=t[3],t[4]=h*a+M*e+d*i-l*u,t[5]=d*a+M*u+l*e-h*i,t[6]=l*a+M*i+h*u-d*e,t[7]=M*a-h*e-d*u-l*i,t}function Pu(t,n,r){var e=r[0],u=r[1],i=r[2],a=r[3],o=n[0],s=n[1],c=n[2],f=n[3];return t[0]=o*a+f*e+s*i-c*u,t[1]=s*a+f*u+c*e-o*i,t[2]=c*a+f*i+o*u-s*e,t[3]=f*a-o*e-s*u-c*i,o=n[4],s=n[5],c=n[6],f=n[7],t[4]=o*a+f*e+s*i-c*u,t[5]=s*a+f*u+c*e-o*i,t[6]=c*a+f*i+o*u-s*e,t[7]=f*a-o*e-s*u-c*i,t}function Vu(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=r[0],s=r[1],c=r[2],f=r[3];return t[0]=e*f+a*o+u*c-i*s,t[1]=u*f+a*s+i*o-e*c,t[2]=i*f+a*c+e*s-u*o,t[3]=a*f-e*o-u*s-i*c,o=r[4],s=r[5],c=r[6],f=r[7],t[4]=e*f+a*o+u*c-i*s,t[5]=u*f+a*s+i*o-e*c,t[6]=i*f+a*c+e*s-u*o,t[7]=a*f-e*o-u*s-i*c,t}function Uu(t,n,r,e){if(Math.abs(e)<l)return vu(t,n);var u=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);e*=.5;var i=Math.sin(e),a=i*r[0]/u,o=i*r[1]/u,s=i*r[2]/u,c=Math.cos(e),f=n[0],h=n[1],d=n[2],M=n[3];t[0]=f*c+M*a+h*s-d*o,t[1]=h*c+M*o+d*a-f*s,t[2]=d*c+M*s+f*o-h*a,t[3]=M*c-f*a-h*o-d*s;var g=n[4],m=n[5],v=n[6],b=n[7];return t[4]=g*c+b*a+m*s-v*o,t[5]=m*c+b*o+v*a-g*s,t[6]=v*c+b*s+g*o-m*a,t[7]=b*c-g*a-m*o-v*s,t}function Iu(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t}function Lu(t,n,r){var e=n[0],u=n[1],i=n[2],a=n[3],o=r[4],s=r[5],c=r[6],f=r[7],h=n[4],d=n[5],l=n[6],M=n[7],g=r[0],m=r[1],v=r[2],b=r[3];return t[0]=e*b+a*g+u*v-i*m,t[1]=u*b+a*m+i*g-e*v,t[2]=i*b+a*v+e*m-u*g,t[3]=a*b-e*g-u*m-i*v,t[4]=e*f+a*o+u*c-i*s+h*b+M*g+d*v-l*m,t[5]=u*f+a*s+i*o-e*c+d*b+M*m+l*g-h*v,t[6]=i*f+a*c+e*s-u*o+l*b+M*v+h*m-d*g,t[7]=a*f-e*o-u*s-i*c+M*b-h*g-d*m-l*v,t}var qu=Lu;function Ou(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t}var Fu=Ke;function Nu(t,n,r,e){var u=1-e;return Fu(n,r)<0&&(e=-e),t[0]=n[0]*u+r[0]*e,t[1]=n[1]*u+r[1]*e,t[2]=n[2]*u+r[2]*e,t[3]=n[3]*u+r[3]*e,t[4]=n[4]*u+r[4]*e,t[5]=n[5]*u+r[5]*e,t[6]=n[6]*u+r[6]*e,t[7]=n[7]*u+r[7]*e,t}function Cu(t,n){var r=Xu(n);return t[0]=-n[0]/r,t[1]=-n[1]/r,t[2]=-n[2]/r,t[3]=n[3]/r,t[4]=-n[4]/r,t[5]=-n[5]/r,t[6]=-n[6]/r,t[7]=n[7]/r,t}function Du(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t[4]=-n[4],t[5]=-n[5],t[6]=-n[6],t[7]=n[7],t}var Bu=Je,ju=Bu,Xu=nu,Yu=Xu;function Gu(t,n){var r=Xu(n);if(r>0){r=Math.sqrt(r);var e=n[0]/r,u=n[1]/r,i=n[2]/r,a=n[3]/r,o=n[4],s=n[5],c=n[6],f=n[7],h=e*o+u*s+i*c+a*f;t[0]=e,t[1]=u,t[2]=i,t[3]=a,t[4]=(o-e*h)/r,t[5]=(s-u*h)/r,t[6]=(c-i*h)/r,t[7]=(f-a*h)/r}return t}function zu(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"}function Wu(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]}function Zu(t,n){var r=t[0],e=t[1],u=t[2],i=t[3],a=t[4],o=t[5],s=t[6],c=t[7],f=n[0],h=n[1],d=n[2],M=n[3],g=n[4],m=n[5],v=n[6],b=n[7];return Math.abs(r-f)<=l*Math.max(1,Math.abs(r),Math.abs(f))&&Math.abs(e-h)<=l*Math.max(1,Math.abs(e),Math.abs(h))&&Math.abs(u-d)<=l*Math.max(1,Math.abs(u),Math.abs(d))&&Math.abs(i-M)<=l*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(a-g)<=l*Math.max(1,Math.abs(a),Math.abs(g))&&Math.abs(o-m)<=l*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(s-v)<=l*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(c-b)<=l*Math.max(1,Math.abs(c),Math.abs(b))}function ku(){var t=new M(2);return M!=Float32Array&&(t[0]=0,t[1]=0),t}function Hu(t){var n=new M(2);return n[0]=t[0],n[1]=t[1],n}function Qu(t,n){var r=new M(2);return r[0]=t,r[1]=n,r}function Ku(t,n){return t[0]=n[0],t[1]=n[1],t}function $u(t,n,r){return t[0]=n,t[1]=r,t}function Ju(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t}function ti(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function ni(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function ri(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function ei(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t}function ui(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t}function ii(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t}function ai(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t}function oi(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t}function si(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t}function ci(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t}function fi(t,n){var r=n[0]-t[0],e=n[1]-t[1];return Math.sqrt(r*r+e*e)}function hi(t,n){var r=n[0]-t[0],e=n[1]-t[1];return r*r+e*e}function di(t){var n=t[0],r=t[1];return Math.sqrt(n*n+r*r)}function li(t){var n=t[0],r=t[1];return n*n+r*r}function Mi(t,n){return t[0]=-n[0],t[1]=-n[1],t}function gi(t,n){return t[0]=1/n[0],t[1]=1/n[1],t}function mi(t,n){var r=n[0],e=n[1],u=r*r+e*e;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u),t}function vi(t,n){return t[0]*n[0]+t[1]*n[1]}function bi(t,n,r){var e=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=e,t}function pi(t,n,r,e){var u=n[0],i=n[1];return t[0]=u+e*(r[0]-u),t[1]=i+e*(r[1]-i),t}function Ei(t,n){n=n||1;var r=2*g()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t}function xi(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[2]*u,t[1]=r[1]*e+r[3]*u,t}function wi(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[2]*u+r[4],t[1]=r[1]*e+r[3]*u+r[5],t}function Ti(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[3]*u+r[6],t[1]=r[1]*e+r[4]*u+r[7],t}function yi(t,n,r){var e=n[0],u=n[1];return t[0]=r[0]*e+r[4]*u+r[12],t[1]=r[1]*e+r[5]*u+r[13],t}function _i(t,n,r,e){var u=n[0]-r[0],i=n[1]-r[1],a=Math.sin(e),o=Math.cos(e);return t[0]=u*o-i*a+r[0],t[1]=u*a+i*o+r[1],t}function Ri(t,n){var r=t[0],e=t[1],u=n[0],i=n[1],a=r*r+e*e;a>0&&(a=1/Math.sqrt(a));var o=u*u+i*i;o>0&&(o=1/Math.sqrt(o));var s=(r*u+e*i)*a*o;return s>1?0:s<-1?Math.PI:Math.acos(s)}function Si(t){return"vec2("+t[0]+", "+t[1]+")"}function Ai(t,n){return t[0]===n[0]&&t[1]===n[1]}function Pi(t,n){var r=t[0],e=t[1],u=n[0],i=n[1];return Math.abs(r-u)<=l*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-i)<=l*Math.max(1,Math.abs(e),Math.abs(i))}var Vi=di,Ui=ti,Ii=ni,Li=ri,qi=fi,Oi=hi,Fi=li,Ni=function(){var t=ku();return function(n,r,e,u,i,a){var o=void 0,s=void 0;for(r||(r=2),e||(e=0),s=u?Math.min(u*r+e,n.length):n.length,o=e;o<s;o+=r)t[0]=n[o],t[1]=n[o+1],i(t,t,a),n[o]=t[0],n[o+1]=t[1];return n}}();r.d(n,"glMatrix",function(){return e}),r.d(n,"mat2",function(){return u}),r.d(n,"mat2d",function(){return i}),r.d(n,"mat3",function(){return a}),r.d(n,"mat4",function(){return o}),r.d(n,"quat",function(){return f}),r.d(n,"quat2",function(){return h}),r.d(n,"vec2",function(){return d}),r.d(n,"vec3",function(){return s}),r.d(n,"vec4",function(){return c})},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0);n.isPowerOf2=function(t){return 0==(t&t-1)},n.toRadians=function(t){return t*Math.PI/180},n.randomInRange=function(t,n){return Math.random()*(n-t)+t},n.createTransformationMatrix=function(t,n,r){const u=e.mat4.create();return e.mat4.translate(u,u,t),e.mat4.rotate(u,u,n[0],e.vec3.fromValues(1,0,0)),e.mat4.rotate(u,u,n[1],e.vec3.fromValues(0,1,0)),e.mat4.rotate(u,u,n[2],e.vec3.fromValues(0,0,1)),e.mat4.scale(u,u,e.vec3.fromValues(r,r,r)),u}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});class e{constructor(t,n,r){this.type=t,this.count=n,this.normalized=r}getType(){return this.type}getCount(){return this.count}isNormalized(){return this.normalized}static getSizeOfType(t,n){switch(n){case t.FLOAT:case t.UNSIGNED_INT:return 4;case t.UNSIGNED_BYTE:return 1}return console.log("getSizeOfType: unknown type"),0}}n.VertexBufferElement=e;n.default=class{constructor(t){this.gl=t,this.elements=[],this.stride=0}getElements(){return this.elements}getStride(){return this.stride}pushFloat(t){this.elements.push(new e(this.gl.FLOAT,t,!1)),this.stride+=t*e.getSizeOfType(this.gl,this.gl.FLOAT)}pushInt(t){this.elements.push(new e(this.gl.UNSIGNED_INT,t,!1)),this.stride+=t*e.getSizeOfType(this.gl,this.gl.UNSIGNED_INT)}pushByte(t){this.elements.push(new e(this.gl.UNSIGNED_BYTE,t,!0)),this.stride+=t*e.getSizeOfType(this.gl,this.gl.UNSIGNED_BYTE)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(1);class u{constructor(t,n){this.gl=t,this.filepath=n,this.reflectivity=0,this.shineDamper=1,this.id=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this.id),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([0,0,255,255]))}getFilepath(){return this.filepath}getReflectivity(){return this.reflectivity}setReflectivity(t){this.reflectivity=t}getShineDamper(){return this.shineDamper}setShineDamper(t){this.shineDamper=t}loadImage(t){this.gl.bindTexture(this.gl.TEXTURE_2D,this.id),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,1),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t),e.isPowerOf2(t.width)&&e.isPowerOf2(t.height)?this.gl.generateMipmap(this.gl.TEXTURE_2D):(this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE))}bind(t=0){this.gl.activeTexture(this.gl.TEXTURE0+t),this.gl.bindTexture(this.gl.TEXTURE_2D,this.id)}unbind(){this.gl.bindTexture(this.gl.TEXTURE_2D,null)}clean(){this.gl.deleteTexture(this.id)}static load(t){return t.map(t=>u.loadImage(t))}static loadImage(t){const n=t.getFilepath();return new Promise((r,e)=>{const u=new Image;u.onload=(()=>{t.loadImage(u),r(u)}),u.onerror=(()=>e(u)),u.src=n})}}n.default=u},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});class e{static init(){window.addEventListener("keydown",t=>{this.keys.set(t.code,!0)}),window.addEventListener("keyup",t=>{this.keys.set(t.code,!1)})}static isPressed(t){return!!this.keys.has(t)&&this.keys.get(t)}}e.keys=new Map,n.default=e},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){null!==t&&null!==n&&(this.va=t,this.ib=n)}getVertexArray(){return this.va}getIndexBuffer(){return this.ib}load(t,n){this.va=t,this.ib=n}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(2);n.default=class{constructor(t){this.gl=t,this.id=this.gl.createVertexArray()}addBuffer(t,n){this.bind(),t.bind();const r=n.getElements();let u=0;for(let t=0;t<r.length;t++){const i=r[t];this.gl.enableVertexAttribArray(t),this.gl.vertexAttribPointer(t,i.getCount(),i.getType(),i.isNormalized(),n.getStride(),u),u+=i.getCount()*e.VertexBufferElement.getSizeOfType(this.gl,i.getType())}}bind(){this.gl.bindVertexArray(this.id)}unbind(){this.gl.bindVertexArray(null)}clean(){this.gl.deleteVertexArray(this.id)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){this.gl=t,this.id=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.id),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(n),this.gl.STATIC_DRAW)}bind(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.id)}unbind(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null)}clean(){this.gl.deleteBuffer(this.id)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n,r){this.gl=t,this.count=r,this.id=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.id),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(n),this.gl.STATIC_DRAW)}getCount(){return this.count}bind(){this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.id)}unbind(){this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)}clean(){this.gl.deleteBuffer(this.id)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */var e=this&&this.__awaiter||function(t,n,r,e){return new(r||(r=Promise))(function(u,i){function a(t){try{s(e.next(t))}catch(t){i(t)}}function o(t){try{s(e.throw(t))}catch(t){i(t)}}function s(t){t.done?u(t.value):new r(function(n){n(t.value)}).then(a,o)}s((e=e.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n,r){this.gl=t,this.vsFilepath=n,this.fsFilepath=r,this.id=null,this.uniformLocationCache=new Map}parseShader(){return e(this,void 0,void 0,function*(){let t,n;return Promise.all([fetch(this.vsFilepath).then(n=>n.text().then(n=>t=n)),fetch(this.fsFilepath).then(t=>t.text().then(t=>n=t))]).then(()=>{this.id=this.initShaderProgram(t,n)})})}initShaderProgram(t,n){const r=this.loadShader(this.gl.VERTEX_SHADER,t),e=this.loadShader(this.gl.FRAGMENT_SHADER,n),u=this.gl.createProgram();return this.gl.attachShader(u,r),this.gl.attachShader(u,e),this.gl.linkProgram(u),this.gl.getProgramParameter(u,this.gl.LINK_STATUS)?u:(console.log("Unable to initialize the shader program: "+this.gl.getProgramInfoLog(u)),null)}loadShader(t,n){const r=this.gl.createShader(t);return this.gl.shaderSource(r,n),this.gl.compileShader(r),this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(console.log("An error occurred compiling the shaders: "+this.gl.getShaderInfoLog(r)),this.gl.deleteShader(r),null)}bind(){this.gl.useProgram(this.id)}unbind(){this.gl.useProgram(null)}clean(){this.gl.deleteProgram(this.id)}setUniform1i(t,n){this.gl.uniform1i(this.getUniformLocation(t),n)}setUniform1f(t,n){this.gl.uniform1f(this.getUniformLocation(t),n)}setUniform4f(t,n,r,e,u){this.gl.uniform4f(this.getUniformLocation(t),n,r,e,u)}setUniformVec3f(t,n){this.gl.uniform3fv(this.getUniformLocation(t),n)}setUniformMat4f(t,n){this.gl.uniformMatrix4fv(this.getUniformLocation(t),!1,n)}getUniformLocation(t){if(this.uniformLocationCache.has(t))return this.uniformLocationCache.get(t);const n=this.gl.getUniformLocation(this.id,t);return-1===n&&console.log(`Warning: uniform '${t}' doesn't exist!`),this.uniformLocationCache.set(t,n),n}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),u=r(11),i=r(3),a=r(4),o=r(12),s=r(13),c=r(15),f=r(16),h=r(1),d=r(21),l=r(24),M=new u.default;let g;const m=new Set,v=new Set;let b,p;let E=0;const x=1/30;function w(t){const n=t.canvas;var r=n.width/n.height,e=window.innerHeight,u=e*r;r!=16/9&&(e=(u=window.innerWidth)/(16/9)),n.width=u,n.height=e,t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)}window.addEventListener("load",function(){const t=document.getElementById("canvas");if(!(t instanceof HTMLCanvasElement))throw new Error("The provided element is not a canvas element.");const n=t.getContext("webgl2");if(!(n instanceof WebGL2RenderingContext))throw alert("Unable to initialize WebGL. Your browser or machine may not support it."),new Error("Unable to initialize WebGL. Your browser or machine may not support it.");M.info(n.getParameter(n.VERSION)),window.addEventListener("resize",()=>w(n),!1),w(n),g=new f.default(n,70,t.width/t.height,.1,1e3);const r=new i.default(n,"./res/white.png"),u=new s.default(r,"./res/dragon.obj");r.setShineDamper(10),r.setReflectivity(1),p=new o.default(u,e.vec3.fromValues(0,0,-25),e.vec3.fromValues(0,0,0),1),m.add(p);const T=new s.default(new i.default(n,"./res/tree.png"),"./res/tree.obj");for(let t=0;t<150;t++)m.add(new o.default(T,e.vec3.fromValues(h.randomInRange(-40,40),0,h.randomInRange(-40,40)),e.vec3.fromValues(0,0,0),2));const y=new s.default(new i.default(n,"./res/box.png"),"./res/box.obj");for(let t=0;t<20;t++)m.add(new o.default(y,e.vec3.fromValues(h.randomInRange(-40,40),.75,h.randomInRange(-40,40)),e.vec3.fromValues(0,h.randomInRange(0,360),0),1));const _=new i.default(n,"./res/grass.png");v.add(new l.default(n,0,0,_)),v.add(new l.default(n,0,-1,_)),v.add(new l.default(n,-1,-1,_)),v.add(new l.default(n,-1,0,_)),Promise.all([g.getStaticShader().parseShader(),g.getTerrainShader().parseShader(),...s.default.load(n,[u,y,T]),...i.default.load([_])]).then(()=>{!function(t){const n=new d.default;g.loadProjectionMatrix(n),b=new c.default(e.vec3.fromValues(0,20,-20),e.vec3.fromValues(1,1,1)),a.default.init(),requestAnimationFrame(r=>(function t(n,r,e){let u=r-E;u>x&&(u=x),g.clear(),e.update(),p.increaseRotation(0,.005,0),v.forEach(t=>g.processTerrain(t)),m.forEach(t=>g.processEntity(t)),g.render(b,e),requestAnimationFrame(r=>t(n,r,e))})(t,r,n))}(n)})})},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});class e{debug(t,...n){e.emitLogMessage("debug",t,n)}info(t,...n){e.emitLogMessage("info",t,n)}warn(t,...n){e.emitLogMessage("warn",t,n)}error(t,...n){e.emitLogMessage("error",t,n)}static emitLogMessage(t,n,r){r.length>0?console[t](n,r):console[t](n)}}n.default=e},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0);n.default=class{constructor(t,n,r,e){this.model=t,this.position=n,this.rotation=r,this.scale=e}getModel(){return this.model}getPosition(){return this.position}setPosition(t,n,r){e.vec3.set(this.position,t,n,r)}increasePosition(t,n,r){e.vec3.add(this.position,this.position,e.vec3.fromValues(t,n,r))}getRotation(){return this.rotation}setRotation(t,n,r){e.vec3.set(this.rotation,t,n,r)}increaseRotation(t,n,r){e.vec3.add(this.rotation,this.rotation,e.vec3.fromValues(t,n,r))}getScale(){return this.scale}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(5),u=r(3),i=r(14);n.default=class extends e.default{constructor(t,n){super(),this.texture=t,this.filepath=n}getTexture(){return this.texture}getFilepath(){return this.filepath}static load(t,n){const r=[];return n.forEach(n=>{r.push(u.default.loadImage(n.getTexture()),i.default.loadModel(t,n))}),r}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */var e=this&&this.__awaiter||function(t,n,r,e){return new(r||(r=Promise))(function(u,i){function a(t){try{s(e.next(t))}catch(t){i(t)}}function o(t){try{s(e.throw(t))}catch(t){i(t)}}function s(t){t.done?u(t.value):new r(function(n){n(t.value)}).then(a,o)}s((e=e.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const u=r(0),i=r(6),a=r(2),o=r(7),s=r(8);class c{static loadModels(t,n){return Promise.all(n.map(n=>c.loadModel(t,n)))}static loadModel(t,n){return e(this,void 0,void 0,function*(){const r=[],e=[],c=[],f=[],h=[],d=[],l=yield fetch(n.getFilepath());(yield l.text()).split(/\r\n|\n/).forEach(t=>{const n=t.split(" ");if(t.startsWith("v "))r.push(u.vec3.fromValues(Number(n[1]),Number(n[2]),Number(n[3])));else if(t.startsWith("vt "))e.push(u.vec2.fromValues(Number(n[1]),Number(n[2])));else if(t.startsWith("vn "))c.push(u.vec3.fromValues(Number(n[1]),Number(n[2]),Number(n[3])));else if(t.startsWith("f ")){const t=n[1].split("/"),r=n[2].split("/"),u=n[3].split("/");this.processVertex(t,f,e,c,h,d),this.processVertex(r,f,e,c,h,d),this.processVertex(u,f,e,c,h,d)}});const M=[];let g=0;r.forEach(t=>{M[g++]=t[0],M[g++]=t[1],M[g++]=t[2]});const m=[];let v=0,b=0,p=0;const E=Math.floor(M.length/3);for(let t=0;t<E;t++)m.push(M[v++],M[v++],M[v++],h[b++],h[b++],d[p++],d[p++],d[p++]);const x=new i.default(t),w=new o.default(t,m),T=new a.default(t);T.pushFloat(3),T.pushFloat(2),T.pushFloat(3),x.addBuffer(w,T);const y=new s.default(t,f,f.length);n.load(x,y)})}static processVertex(t,n,r,e,u,i){const a=Number(t[0])-1;n.push(a);const o=r[Number(t[1])-1];u[2*a]=o[0],u[2*a+1]=o[1];const s=e[Number(t[2])-1];i[3*a]=s[0],i[3*a+1]=s[1],i[3*a+2]=s[2]}}n.default=c},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){this.position=t,this.color=n}getPosition(){return this.position}getColor(){return this.color}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(17),u=r(18),i=r(0),a=r(1),o=r(19),s=r(20);n.default=class{constructor(t,n,r,c,f){this.gl=t,this.projectionMatrix=i.mat4.create(),this.entities=new Map,this.terrains=new Set,this.staticShader=new e.default(t,"./shaders/vertexShader.glsl","./shaders/fragmentShader.glsl"),this.terrainShader=new o.default(t,"./shaders/terrainVertexShader.glsl","./shaders/terrainFragmentShader.glsl"),this.entityRenderer=new u.default(t,this.staticShader),this.terrainRenderer=new s.default(t,this.terrainShader),i.mat4.perspective(this.projectionMatrix,a.toRadians(n),r,c,f),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.clearColor(1,1,1,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}getEntityRenderer(){return this.entityRenderer}getStaticShader(){return this.staticShader}getTerrainShader(){return this.terrainShader}render(t,n){this.clear(),this.staticShader.bind(),this.staticShader.loadLight(t),this.staticShader.loadViewMatrix(n),this.entityRenderer.render(this.entities),this.staticShader.unbind(),this.terrainShader.bind(),this.terrainShader.loadLight(t),this.terrainShader.loadViewMatrix(n),this.terrainRenderer.render(this.terrains),this.terrainShader.unbind(),this.entities.clear(),this.terrains.clear()}clear(){this.gl.clearColor(0,0,.95,1),this.gl.clearDepth(1),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)}processEntity(t){this.entities.has(t.getModel())?this.entities.get(t.getModel()).add(t):this.entities.set(t.getModel(),new Set([t]))}processTerrain(t){this.terrains.add(t)}loadProjectionMatrix(t){this.staticShader.bind(),this.staticShader.setUniformMat4f("uProjectionMatrix",this.projectionMatrix),this.terrainShader.bind(),this.terrainShader.setUniformMat4f("uProjectionMatrix",this.projectionMatrix)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(9);n.default=class extends e.default{loadViewMatrix(t){this.setUniformMat4f("uViewMatrix",t.createViewMatrix())}loadLight(t){this.setUniformVec3f("uLightPosition",t.getPosition()),this.setUniformVec3f("uLightColor",t.getColor())}loadShineVariables(t,n){this.setUniform1f("uShineDamper",t),this.setUniform1f("uReflectivity",n)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(1);n.default=class{constructor(t,n){this.gl=t,this.shader=n}getRenderingContext(){return this.gl}render(t){this.enableCulling(),t.forEach((t,n)=>{n.getVertexArray().bind(),n.getIndexBuffer().bind(),n.getTexture().bind(),this.shader.loadShineVariables(n.getTexture().getShineDamper(),n.getTexture().getReflectivity()),t.forEach(t=>{this.shader.setUniformMat4f("uTransformationMatrix",e.createTransformationMatrix(t.getPosition(),t.getRotation(),t.getScale())),this.gl.drawElements(this.gl.TRIANGLES,n.getIndexBuffer().getCount(),this.gl.UNSIGNED_INT,0)}),n.getVertexArray().unbind(),n.getIndexBuffer().unbind()}),this.disableCulling()}enableCulling(){this.gl.enable(this.gl.CULL_FACE),this.gl.cullFace(this.gl.BACK)}disableCulling(){this.gl.disable(this.gl.CULL_FACE)}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(9);n.default=class extends e.default{loadViewMatrix(t){this.setUniformMat4f("uViewMatrix",t.createViewMatrix())}loadLight(t){this.setUniformVec3f("uLightPosition",t.getPosition()),this.setUniformVec3f("uLightColor",t.getColor())}loadShineVariables(t,n){this.setUniform1f("uShineDamper",t),this.setUniform1f("uReflectivity",n)}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(1),u=r(0);n.default=
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
class{constructor(t,n){this.gl=t,this.shader=n}render(t){t.forEach(t=>{const n=t.getModel(),r=t.getTexture();n.getVertexArray().bind(),n.getIndexBuffer().bind(),r.bind(),this.shader.loadShineVariables(r.getShineDamper(),r.getReflectivity()),this.shader.setUniformMat4f("uTransformationMatrix",e.createTransformationMatrix(u.vec3.fromValues(t.getX(),0,t.getZ()),u.vec3.fromValues(0,0,0),1)),this.gl.drawElements(this.gl.TRIANGLES,n.getIndexBuffer().getCount(),this.gl.UNSIGNED_INT,0),n.getVertexArray().unbind(),n.getIndexBuffer().unbind()})}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),u=r(22),i=r(4),a=r(23);class o extends u.default{constructor(){super(new a.default(0,10),new a.default(30,5))}update(){i.default.isPressed("KeyW")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,0,-o.CAMERA_VELOCITY)),i.default.isPressed("KeyS")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,0,o.CAMERA_VELOCITY)),i.default.isPressed("KeyA")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(-o.CAMERA_VELOCITY,0,0)),i.default.isPressed("KeyD")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(o.CAMERA_VELOCITY,0,0)),i.default.isPressed("Space")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,o.CAMERA_VELOCITY,0)),i.default.isPressed("ShiftLeft")&&e.vec3.add(this.position,this.position,e.vec3.fromValues(0,-o.CAMERA_VELOCITY,0))}calculateZoom(){throw new Error("Method not implemented.")}}o.CAMERA_VELOCITY=.5,n.default=o},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),u=r(1);n.default=class{constructor(t,n){this.angleAroundOrigin=t,this.distanceFromOrigin=n,this.position=e.vec3.fromValues(0,0,0),this.rotation=e.vec3.fromValues(0,0,0)}getPosition(){return this.position}setPosition(t,n,r){e.vec3.set(this.position,t,n,r)}setRotation(t,n,r){e.vec3.set(this.rotation,t,n,r)}getPitch(){return this.rotation[0]}getYaw(){return this.rotation[1]}getRoll(){return this.rotation[2]}createViewMatrix(){const t=e.mat4.create();e.mat4.rotate(t,t,u.toRadians(this.rotation[0]),[1,0,0]),e.mat4.rotate(t,t,u.toRadians(this.rotation[1]),[0,1,0]),e.mat4.rotate(t,t,u.toRadians(this.rotation[2]),[0,0,1]);const n=e.vec3.fromValues(-this.position[0],-this.position[1],-this.position[2]);return e.mat4.translate(t,t,n),t}}},function(t,n,r){"use strict";
/**
 * @license
 * Copyright (c) 2018 Javier Orbe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t,n){this.agility=n,this.target=t,this.actual=t}update(t){const n=(this.target-this.actual)*t*this.agility;this.actual+=n}setTarget(t){this.target=t}increaseTarget(t){this.target+=t}get(){return this.actual}getTarget(){return this.target}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(5),u=r(6),i=r(8),a=r(7),o=r(2);class s{constructor(t,n,r,e){this.texture=e,this.x=n*s.SIZE,this.z=r*s.SIZE,this.model=s.generateTerrain(t)}getX(){return this.x}getZ(){return this.z}getModel(){return this.model}getTexture(){return this.texture}static generateTerrain(t){const n=[],r=[];for(let t=0;t<s.VERTEX_COUNT;t++)for(let r=0;r<s.VERTEX_COUNT;r++)n.push(r/(s.VERTEX_COUNT-1)*s.SIZE,0,t/(s.VERTEX_COUNT-1)*s.SIZE,r/(s.VERTEX_COUNT-1),t/(s.VERTEX_COUNT-1),0,1,0);for(let t=0;t<s.VERTEX_COUNT-1;t++)for(let n=0;n<s.VERTEX_COUNT-1;n++){const e=t*s.VERTEX_COUNT+n,u=e+1,i=(t+1)*s.VERTEX_COUNT+n,a=i+1;r.push(e,i,u,u,i,a)}const c=new u.default(t),f=new i.default(t,r,r.length),h=new o.default(t);return h.pushFloat(3),h.pushFloat(2),h.pushFloat(3),c.addBuffer(new a.default(t,n),h),new e.default(c,f)}}s.SIZE=800,s.VERTEX_COUNT=128,n.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,